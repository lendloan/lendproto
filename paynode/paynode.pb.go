// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: paynode.proto

package paynode

import (
	common "github.com/lendloan/lendproto/common"
	rescode "github.com/lendloan/lendproto/rescode"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SponsorAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Sponsor *common.SponsorItem `protobuf:"bytes,2,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
	Extra   map[string]string   `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorAddReq) Reset() {
	*x = SponsorAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorAddReq) ProtoMessage() {}

func (x *SponsorAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorAddReq.ProtoReflect.Descriptor instead.
func (*SponsorAddReq) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{0}
}

func (x *SponsorAddReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SponsorAddReq) GetSponsor() *common.SponsorItem {
	if x != nil {
		return x.Sponsor
	}
	return nil
}

func (x *SponsorAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SponsorAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorAddRes) Reset() {
	*x = SponsorAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorAddRes) ProtoMessage() {}

func (x *SponsorAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorAddRes.ProtoReflect.Descriptor instead.
func (*SponsorAddRes) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{1}
}

func (x *SponsorAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SponsorAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SponsorAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SponsorListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Uid   int64             `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorListReq) Reset() {
	*x = SponsorListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorListReq) ProtoMessage() {}

func (x *SponsorListReq) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorListReq.ProtoReflect.Descriptor instead.
func (*SponsorListReq) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{2}
}

func (x *SponsorListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SponsorListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SponsorListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SponsorListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SponsorListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SponsorListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SponsorItem `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorListRes) Reset() {
	*x = SponsorListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorListRes) ProtoMessage() {}

func (x *SponsorListRes) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorListRes.ProtoReflect.Descriptor instead.
func (*SponsorListRes) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{3}
}

func (x *SponsorListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SponsorListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SponsorListRes) GetLists() []*common.SponsorItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SponsorListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *common.Authorize  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Page     int32              `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32              `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Products *common.VipProduct `protobuf:"bytes,4,opt,name=products,proto3" json:"products,omitempty"`
	Extra    map[string]string  `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipProductReq) Reset() {
	*x = VipProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipProductReq) ProtoMessage() {}

func (x *VipProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipProductReq.ProtoReflect.Descriptor instead.
func (*VipProductReq) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{4}
}

func (x *VipProductReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *VipProductReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipProductReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VipProductReq) GetProducts() *common.VipProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *VipProductReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Products []*common.VipProduct `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	Extra    map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipProductRes) Reset() {
	*x = VipProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipProductRes) ProtoMessage() {}

func (x *VipProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipProductRes.ProtoReflect.Descriptor instead.
func (*VipProductRes) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{5}
}

func (x *VipProductRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipProductRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipProductRes) GetProducts() []*common.VipProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *VipProductRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipDescReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Op    int32             `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加/更新
	Desc  *common.VipDesc   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipDescReq) Reset() {
	*x = VipDescReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipDescReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipDescReq) ProtoMessage() {}

func (x *VipDescReq) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipDescReq.ProtoReflect.Descriptor instead.
func (*VipDescReq) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{6}
}

func (x *VipDescReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *VipDescReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *VipDescReq) GetDesc() *common.VipDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VipDescReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipDescRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Desc    *common.VipDesc   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipDescRes) Reset() {
	*x = VipDescRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipDescRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipDescRes) ProtoMessage() {}

func (x *VipDescRes) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipDescRes.ProtoReflect.Descriptor instead.
func (*VipDescRes) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{7}
}

func (x *VipDescRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipDescRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipDescRes) GetDesc() *common.VipDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VipDescRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Order *common.VipOrder  `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayReq) Reset() {
	*x = VipPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayReq) ProtoMessage() {}

func (x *VipPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayReq.ProtoReflect.Descriptor instead.
func (*VipPayReq) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{8}
}

func (x *VipPayReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *VipPayReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipPayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   *common.VipOrder  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayRes) Reset() {
	*x = VipPayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayRes) ProtoMessage() {}

func (x *VipPayRes) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayRes.ProtoReflect.Descriptor instead.
func (*VipPayRes) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{9}
}

func (x *VipPayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipPayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipPayRes) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipPayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Cb    *common.VipPayCb  `protobuf:"bytes,2,opt,name=cb,proto3" json:"cb,omitempty"`
	Acb   *common.AlipayCb  `protobuf:"bytes,3,opt,name=acb,proto3" json:"acb,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayCallReq) Reset() {
	*x = VipPayCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayCallReq) ProtoMessage() {}

func (x *VipPayCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayCallReq.ProtoReflect.Descriptor instead.
func (*VipPayCallReq) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{10}
}

func (x *VipPayCallReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *VipPayCallReq) GetCb() *common.VipPayCb {
	if x != nil {
		return x.Cb
	}
	return nil
}

func (x *VipPayCallReq) GetAcb() *common.AlipayCb {
	if x != nil {
		return x.Acb
	}
	return nil
}

func (x *VipPayCallReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayCallRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayCallRes) Reset() {
	*x = VipPayCallRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayCallRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayCallRes) ProtoMessage() {}

func (x *VipPayCallRes) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayCallRes.ProtoReflect.Descriptor instead.
func (*VipPayCallRes) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{11}
}

func (x *VipPayCallRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipPayCallRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipPayCallRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Order *common.VipOrder  `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Page  int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderListReq) Reset() {
	*x = VipOrderListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderListReq) ProtoMessage() {}

func (x *VipOrderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderListReq.ProtoReflect.Descriptor instead.
func (*VipOrderListReq) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{12}
}

func (x *VipOrderListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *VipOrderListReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipOrderListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VipOrderListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   []*common.VipOrder `protobuf:"bytes,3,rep,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderListRes) Reset() {
	*x = VipOrderListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paynode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderListRes) ProtoMessage() {}

func (x *VipOrderListRes) ProtoReflect() protoreflect.Message {
	mi := &file_paynode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderListRes.ProtoReflect.Descriptor instead.
func (*VipOrderListRes) Descriptor() ([]byte, []int) {
	return file_paynode_proto_rawDescGZIP(), []int{13}
}

func (x *VipOrderListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipOrderListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipOrderListRes) GetOrder() []*common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_paynode_proto protoreflect.FileDescriptor

var file_paynode_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2d, 0x0a,
	0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61,
	0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc3, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01,
	0x0a, 0x0e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61,
	0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x81, 0x02, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x0a, 0x56,
	0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x09, 0x56,
	0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x70, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a,
	0x0d, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x02, 0x63, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61,
	0x79, 0x43, 0x62, 0x52, 0x02, 0x63, 0x62, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x63, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x43, 0x62, 0x52, 0x03, 0x61, 0x63, 0x62, 0x12, 0x37, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x79,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3,
	0x01, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xc4, 0x03, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a,
	0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x07,
	0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70,
	0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x12, 0x12, 0x2e,
	0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x50, 0x61,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x2f, 0x70, 0x61, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_paynode_proto_rawDescOnce sync.Once
	file_paynode_proto_rawDescData = file_paynode_proto_rawDesc
)

func file_paynode_proto_rawDescGZIP() []byte {
	file_paynode_proto_rawDescOnce.Do(func() {
		file_paynode_proto_rawDescData = protoimpl.X.CompressGZIP(file_paynode_proto_rawDescData)
	})
	return file_paynode_proto_rawDescData
}

var file_paynode_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_paynode_proto_goTypes = []interface{}{
	(*SponsorAddReq)(nil),      // 0: paynode.SponsorAddReq
	(*SponsorAddRes)(nil),      // 1: paynode.SponsorAddRes
	(*SponsorListReq)(nil),     // 2: paynode.SponsorListReq
	(*SponsorListRes)(nil),     // 3: paynode.SponsorListRes
	(*VipProductReq)(nil),      // 4: paynode.VipProductReq
	(*VipProductRes)(nil),      // 5: paynode.VipProductRes
	(*VipDescReq)(nil),         // 6: paynode.VipDescReq
	(*VipDescRes)(nil),         // 7: paynode.VipDescRes
	(*VipPayReq)(nil),          // 8: paynode.VipPayReq
	(*VipPayRes)(nil),          // 9: paynode.VipPayRes
	(*VipPayCallReq)(nil),      // 10: paynode.VipPayCallReq
	(*VipPayCallRes)(nil),      // 11: paynode.VipPayCallRes
	(*VipOrderListReq)(nil),    // 12: paynode.VipOrderListReq
	(*VipOrderListRes)(nil),    // 13: paynode.VipOrderListRes
	nil,                        // 14: paynode.SponsorAddReq.ExtraEntry
	nil,                        // 15: paynode.SponsorAddRes.ExtraEntry
	nil,                        // 16: paynode.SponsorListReq.ExtraEntry
	nil,                        // 17: paynode.SponsorListRes.ExtraEntry
	nil,                        // 18: paynode.VipProductReq.ExtraEntry
	nil,                        // 19: paynode.VipProductRes.ExtraEntry
	nil,                        // 20: paynode.VipDescReq.ExtraEntry
	nil,                        // 21: paynode.VipDescRes.ExtraEntry
	nil,                        // 22: paynode.VipPayReq.ExtraEntry
	nil,                        // 23: paynode.VipPayRes.ExtraEntry
	nil,                        // 24: paynode.VipPayCallReq.ExtraEntry
	nil,                        // 25: paynode.VipPayCallRes.ExtraEntry
	nil,                        // 26: paynode.VipOrderListReq.ExtraEntry
	nil,                        // 27: paynode.VipOrderListRes.ExtraEntry
	(*common.Authorize)(nil),   // 28: common.Authorize
	(*common.SponsorItem)(nil), // 29: common.SponsorItem
	(rescode.Code)(0),          // 30: rescode.Code
	(*common.VipProduct)(nil),  // 31: common.VipProduct
	(*common.VipDesc)(nil),     // 32: common.VipDesc
	(*common.VipOrder)(nil),    // 33: common.VipOrder
	(*common.VipPayCb)(nil),    // 34: common.VipPayCb
	(*common.AlipayCb)(nil),    // 35: common.AlipayCb
}
var file_paynode_proto_depIdxs = []int32{
	28, // 0: paynode.SponsorAddReq.auth:type_name -> common.Authorize
	29, // 1: paynode.SponsorAddReq.sponsor:type_name -> common.SponsorItem
	14, // 2: paynode.SponsorAddReq.extra:type_name -> paynode.SponsorAddReq.ExtraEntry
	30, // 3: paynode.SponsorAddRes.rescode:type_name -> rescode.Code
	15, // 4: paynode.SponsorAddRes.extra:type_name -> paynode.SponsorAddRes.ExtraEntry
	28, // 5: paynode.SponsorListReq.auth:type_name -> common.Authorize
	16, // 6: paynode.SponsorListReq.extra:type_name -> paynode.SponsorListReq.ExtraEntry
	30, // 7: paynode.SponsorListRes.rescode:type_name -> rescode.Code
	29, // 8: paynode.SponsorListRes.lists:type_name -> common.SponsorItem
	17, // 9: paynode.SponsorListRes.extra:type_name -> paynode.SponsorListRes.ExtraEntry
	28, // 10: paynode.VipProductReq.auth:type_name -> common.Authorize
	31, // 11: paynode.VipProductReq.products:type_name -> common.VipProduct
	18, // 12: paynode.VipProductReq.extra:type_name -> paynode.VipProductReq.ExtraEntry
	30, // 13: paynode.VipProductRes.rescode:type_name -> rescode.Code
	31, // 14: paynode.VipProductRes.products:type_name -> common.VipProduct
	19, // 15: paynode.VipProductRes.extra:type_name -> paynode.VipProductRes.ExtraEntry
	28, // 16: paynode.VipDescReq.auth:type_name -> common.Authorize
	32, // 17: paynode.VipDescReq.desc:type_name -> common.VipDesc
	20, // 18: paynode.VipDescReq.extra:type_name -> paynode.VipDescReq.ExtraEntry
	30, // 19: paynode.VipDescRes.rescode:type_name -> rescode.Code
	32, // 20: paynode.VipDescRes.desc:type_name -> common.VipDesc
	21, // 21: paynode.VipDescRes.extra:type_name -> paynode.VipDescRes.ExtraEntry
	28, // 22: paynode.VipPayReq.auth:type_name -> common.Authorize
	33, // 23: paynode.VipPayReq.order:type_name -> common.VipOrder
	22, // 24: paynode.VipPayReq.extra:type_name -> paynode.VipPayReq.ExtraEntry
	30, // 25: paynode.VipPayRes.rescode:type_name -> rescode.Code
	33, // 26: paynode.VipPayRes.order:type_name -> common.VipOrder
	23, // 27: paynode.VipPayRes.extra:type_name -> paynode.VipPayRes.ExtraEntry
	28, // 28: paynode.VipPayCallReq.auth:type_name -> common.Authorize
	34, // 29: paynode.VipPayCallReq.cb:type_name -> common.VipPayCb
	35, // 30: paynode.VipPayCallReq.acb:type_name -> common.AlipayCb
	24, // 31: paynode.VipPayCallReq.extra:type_name -> paynode.VipPayCallReq.ExtraEntry
	30, // 32: paynode.VipPayCallRes.rescode:type_name -> rescode.Code
	25, // 33: paynode.VipPayCallRes.extra:type_name -> paynode.VipPayCallRes.ExtraEntry
	28, // 34: paynode.VipOrderListReq.auth:type_name -> common.Authorize
	33, // 35: paynode.VipOrderListReq.order:type_name -> common.VipOrder
	26, // 36: paynode.VipOrderListReq.extra:type_name -> paynode.VipOrderListReq.ExtraEntry
	30, // 37: paynode.VipOrderListRes.rescode:type_name -> rescode.Code
	33, // 38: paynode.VipOrderListRes.order:type_name -> common.VipOrder
	27, // 39: paynode.VipOrderListRes.extra:type_name -> paynode.VipOrderListRes.ExtraEntry
	0,  // 40: paynode.PaynodeService.SponsorAdd:input_type -> paynode.SponsorAddReq
	2,  // 41: paynode.PaynodeService.SponsorList:input_type -> paynode.SponsorListReq
	4,  // 42: paynode.PaynodeService.VipProduct:input_type -> paynode.VipProductReq
	6,  // 43: paynode.PaynodeService.VipDesc:input_type -> paynode.VipDescReq
	8,  // 44: paynode.PaynodeService.VipPay:input_type -> paynode.VipPayReq
	10, // 45: paynode.PaynodeService.VipPayCall:input_type -> paynode.VipPayCallReq
	12, // 46: paynode.PaynodeService.VipOrderList:input_type -> paynode.VipOrderListReq
	1,  // 47: paynode.PaynodeService.SponsorAdd:output_type -> paynode.SponsorAddRes
	3,  // 48: paynode.PaynodeService.SponsorList:output_type -> paynode.SponsorListRes
	5,  // 49: paynode.PaynodeService.VipProduct:output_type -> paynode.VipProductRes
	7,  // 50: paynode.PaynodeService.VipDesc:output_type -> paynode.VipDescRes
	9,  // 51: paynode.PaynodeService.VipPay:output_type -> paynode.VipPayRes
	11, // 52: paynode.PaynodeService.VipPayCall:output_type -> paynode.VipPayCallRes
	13, // 53: paynode.PaynodeService.VipOrderList:output_type -> paynode.VipOrderListRes
	47, // [47:54] is the sub-list for method output_type
	40, // [40:47] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_paynode_proto_init() }
func file_paynode_proto_init() {
	if File_paynode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_paynode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipDescReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipDescRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayCallRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paynode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_paynode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_paynode_proto_goTypes,
		DependencyIndexes: file_paynode_proto_depIdxs,
		MessageInfos:      file_paynode_proto_msgTypes,
	}.Build()
	File_paynode_proto = out.File
	file_paynode_proto_rawDesc = nil
	file_paynode_proto_goTypes = nil
	file_paynode_proto_depIdxs = nil
}
