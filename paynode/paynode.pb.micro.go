// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: paynode.proto

package paynode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PaynodeService service

func NewPaynodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaynodeService service

type PaynodeService interface {
	// vip产品列表
	VipProduct(ctx context.Context, in *VipProductReq, opts ...client.CallOption) (*VipProductRes, error)
	// vip产品介绍
	VipDesc(ctx context.Context, in *VipDescReq, opts ...client.CallOption) (*VipDescRes, error)
	// vip充值
	VipPay(ctx context.Context, in *VipPayReq, opts ...client.CallOption) (*VipPayRes, error)
	// vip充值会掉
	VipPayCall(ctx context.Context, in *VipPayCallReq, opts ...client.CallOption) (*VipPayCallRes, error)
	// 获取vip充值列表
	VipOrderList(ctx context.Context, in *VipOrderListReq, opts ...client.CallOption) (*VipOrderListRes, error)
}

type paynodeService struct {
	c    client.Client
	name string
}

func NewPaynodeService(name string, c client.Client) PaynodeService {
	return &paynodeService{
		c:    c,
		name: name,
	}
}

func (c *paynodeService) VipProduct(ctx context.Context, in *VipProductReq, opts ...client.CallOption) (*VipProductRes, error) {
	req := c.c.NewRequest(c.name, "PaynodeService.VipProduct", in)
	out := new(VipProductRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paynodeService) VipDesc(ctx context.Context, in *VipDescReq, opts ...client.CallOption) (*VipDescRes, error) {
	req := c.c.NewRequest(c.name, "PaynodeService.VipDesc", in)
	out := new(VipDescRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paynodeService) VipPay(ctx context.Context, in *VipPayReq, opts ...client.CallOption) (*VipPayRes, error) {
	req := c.c.NewRequest(c.name, "PaynodeService.VipPay", in)
	out := new(VipPayRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paynodeService) VipPayCall(ctx context.Context, in *VipPayCallReq, opts ...client.CallOption) (*VipPayCallRes, error) {
	req := c.c.NewRequest(c.name, "PaynodeService.VipPayCall", in)
	out := new(VipPayCallRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paynodeService) VipOrderList(ctx context.Context, in *VipOrderListReq, opts ...client.CallOption) (*VipOrderListRes, error) {
	req := c.c.NewRequest(c.name, "PaynodeService.VipOrderList", in)
	out := new(VipOrderListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaynodeService service

type PaynodeServiceHandler interface {
	// vip产品列表
	VipProduct(context.Context, *VipProductReq, *VipProductRes) error
	// vip产品介绍
	VipDesc(context.Context, *VipDescReq, *VipDescRes) error
	// vip充值
	VipPay(context.Context, *VipPayReq, *VipPayRes) error
	// vip充值会掉
	VipPayCall(context.Context, *VipPayCallReq, *VipPayCallRes) error
	// 获取vip充值列表
	VipOrderList(context.Context, *VipOrderListReq, *VipOrderListRes) error
}

func RegisterPaynodeServiceHandler(s server.Server, hdlr PaynodeServiceHandler, opts ...server.HandlerOption) error {
	type paynodeService interface {
		VipProduct(ctx context.Context, in *VipProductReq, out *VipProductRes) error
		VipDesc(ctx context.Context, in *VipDescReq, out *VipDescRes) error
		VipPay(ctx context.Context, in *VipPayReq, out *VipPayRes) error
		VipPayCall(ctx context.Context, in *VipPayCallReq, out *VipPayCallRes) error
		VipOrderList(ctx context.Context, in *VipOrderListReq, out *VipOrderListRes) error
	}
	type PaynodeService struct {
		paynodeService
	}
	h := &paynodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PaynodeService{h}, opts...))
}

type paynodeServiceHandler struct {
	PaynodeServiceHandler
}

func (h *paynodeServiceHandler) VipProduct(ctx context.Context, in *VipProductReq, out *VipProductRes) error {
	return h.PaynodeServiceHandler.VipProduct(ctx, in, out)
}

func (h *paynodeServiceHandler) VipDesc(ctx context.Context, in *VipDescReq, out *VipDescRes) error {
	return h.PaynodeServiceHandler.VipDesc(ctx, in, out)
}

func (h *paynodeServiceHandler) VipPay(ctx context.Context, in *VipPayReq, out *VipPayRes) error {
	return h.PaynodeServiceHandler.VipPay(ctx, in, out)
}

func (h *paynodeServiceHandler) VipPayCall(ctx context.Context, in *VipPayCallReq, out *VipPayCallRes) error {
	return h.PaynodeServiceHandler.VipPayCall(ctx, in, out)
}

func (h *paynodeServiceHandler) VipOrderList(ctx context.Context, in *VipOrderListReq, out *VipOrderListRes) error {
	return h.PaynodeServiceHandler.VipOrderList(ctx, in, out)
}
