// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkgnode.proto

package pkgnode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PkgnodeService service

func NewPkgnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PkgnodeService service

type PkgnodeService interface {
	AddPkg(ctx context.Context, in *AddPkgReq, opts ...client.CallOption) (*AddPkgRes, error)
	DelPkg(ctx context.Context, in *DelPkgReq, opts ...client.CallOption) (*DelPkgRes, error)
	PkgLists(ctx context.Context, in *PkgListReq, opts ...client.CallOption) (*PkgListRes, error)
	PkgCount(ctx context.Context, in *PkgCountReq, opts ...client.CallOption) (*PkgCountRes, error)
}

type pkgnodeService struct {
	c    client.Client
	name string
}

func NewPkgnodeService(name string, c client.Client) PkgnodeService {
	return &pkgnodeService{
		c:    c,
		name: name,
	}
}

func (c *pkgnodeService) AddPkg(ctx context.Context, in *AddPkgReq, opts ...client.CallOption) (*AddPkgRes, error) {
	req := c.c.NewRequest(c.name, "PkgnodeService.AddPkg", in)
	out := new(AddPkgRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgnodeService) DelPkg(ctx context.Context, in *DelPkgReq, opts ...client.CallOption) (*DelPkgRes, error) {
	req := c.c.NewRequest(c.name, "PkgnodeService.DelPkg", in)
	out := new(DelPkgRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgnodeService) PkgLists(ctx context.Context, in *PkgListReq, opts ...client.CallOption) (*PkgListRes, error) {
	req := c.c.NewRequest(c.name, "PkgnodeService.PkgLists", in)
	out := new(PkgListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkgnodeService) PkgCount(ctx context.Context, in *PkgCountReq, opts ...client.CallOption) (*PkgCountRes, error) {
	req := c.c.NewRequest(c.name, "PkgnodeService.PkgCount", in)
	out := new(PkgCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PkgnodeService service

type PkgnodeServiceHandler interface {
	AddPkg(context.Context, *AddPkgReq, *AddPkgRes) error
	DelPkg(context.Context, *DelPkgReq, *DelPkgRes) error
	PkgLists(context.Context, *PkgListReq, *PkgListRes) error
	PkgCount(context.Context, *PkgCountReq, *PkgCountRes) error
}

func RegisterPkgnodeServiceHandler(s server.Server, hdlr PkgnodeServiceHandler, opts ...server.HandlerOption) error {
	type pkgnodeService interface {
		AddPkg(ctx context.Context, in *AddPkgReq, out *AddPkgRes) error
		DelPkg(ctx context.Context, in *DelPkgReq, out *DelPkgRes) error
		PkgLists(ctx context.Context, in *PkgListReq, out *PkgListRes) error
		PkgCount(ctx context.Context, in *PkgCountReq, out *PkgCountRes) error
	}
	type PkgnodeService struct {
		pkgnodeService
	}
	h := &pkgnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PkgnodeService{h}, opts...))
}

type pkgnodeServiceHandler struct {
	PkgnodeServiceHandler
}

func (h *pkgnodeServiceHandler) AddPkg(ctx context.Context, in *AddPkgReq, out *AddPkgRes) error {
	return h.PkgnodeServiceHandler.AddPkg(ctx, in, out)
}

func (h *pkgnodeServiceHandler) DelPkg(ctx context.Context, in *DelPkgReq, out *DelPkgRes) error {
	return h.PkgnodeServiceHandler.DelPkg(ctx, in, out)
}

func (h *pkgnodeServiceHandler) PkgLists(ctx context.Context, in *PkgListReq, out *PkgListRes) error {
	return h.PkgnodeServiceHandler.PkgLists(ctx, in, out)
}

func (h *pkgnodeServiceHandler) PkgCount(ctx context.Context, in *PkgCountReq, out *PkgCountRes) error {
	return h.PkgnodeServiceHandler.PkgCount(ctx, in, out)
}
