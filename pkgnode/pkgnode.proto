syntax = "proto3";
package pkgnode;
import "rescode/rescode.proto";
import "common/common.proto";

option go_package="./pkgnode";


message AddPkgReq {
    common.Authorize      auth = 1;
    // @inject_tag: form:"name"
    string                name  = 2;
    // @inject_tag: form:"version"
    string                version = 3;
    // @inject_tag: form:"address"
    string                address = 4;
    map<string,string>    extra = 5;
}

message AddPkgRes {
    rescode.Code        rescode = 1;
    string              resmsg = 2;
    map<string,string>  extra = 3;
}

message DelPkgReq {
    common.Authorize      auth = 1;
    // @inject_tag: form:"name"
    string                name  = 2;
    // @inject_tag: form:"version"
    string                version = 3;
    map<string,string>    extra = 4;
}

message DelPkgRes {
    rescode.Code        rescode = 1;
    string              resmsg = 2;
    map<string,string>  extra = 3;
}

message PkgListReq {
    common.Authorize      auth = 1;
    // @inject_tag: form:"name"
    string                name = 2;
    // @inject_tag: form:"page"
    int64                 page = 3;
    // @inject_tag: form:"size"
    int64                 size = 4;
    map<string,string>    extra = 5;
}

message PkgListRes {
    rescode.Code        rescode = 1;
    string              resmsg = 2;
    repeated common.PkgItem   version = 3;
    map<string,string>  extra = 4;
}

message PkgCountReq {
    common.Authorize      auth = 1;
    // @inject_tag: form:"name"
    string                name = 2;
    map<string,string>    extra = 3;
}

message PkgCountRes {
    rescode.Code        rescode = 1;
    string              resmsg = 2;
    int64               count = 3;
    map<string,string>  extra = 4;
}

service PkgnodeService {
    rpc  AddPkg(AddPkgReq) returns(AddPkgRes){}

    rpc  DelPkg(DelPkgReq) returns(DelPkgRes){}

    rpc  PkgLists(PkgListReq) returns(PkgListRes){}

    rpc  PkgCount(PkgCountReq) returns(PkgCountRes) {}
}