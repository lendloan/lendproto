// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: friendnode.proto

package friendnode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FriendnodeService service

func NewFriendnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FriendnodeService service

type FriendnodeService interface {
	AddFriends(ctx context.Context, in *AddFriendsReq, opts ...client.CallOption) (*AddFriendsRes, error)
	FriendsCount(ctx context.Context, in *FriendsCountReq, opts ...client.CallOption) (*FriendsCountRes, error)
	GetFriends(ctx context.Context, in *GetFriendsReq, opts ...client.CallOption) (*GetFriendsRes, error)
}

type friendnodeService struct {
	c    client.Client
	name string
}

func NewFriendnodeService(name string, c client.Client) FriendnodeService {
	return &friendnodeService{
		c:    c,
		name: name,
	}
}

func (c *friendnodeService) AddFriends(ctx context.Context, in *AddFriendsReq, opts ...client.CallOption) (*AddFriendsRes, error) {
	req := c.c.NewRequest(c.name, "FriendnodeService.AddFriends", in)
	out := new(AddFriendsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendnodeService) FriendsCount(ctx context.Context, in *FriendsCountReq, opts ...client.CallOption) (*FriendsCountRes, error) {
	req := c.c.NewRequest(c.name, "FriendnodeService.FriendsCount", in)
	out := new(FriendsCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendnodeService) GetFriends(ctx context.Context, in *GetFriendsReq, opts ...client.CallOption) (*GetFriendsRes, error) {
	req := c.c.NewRequest(c.name, "FriendnodeService.GetFriends", in)
	out := new(GetFriendsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FriendnodeService service

type FriendnodeServiceHandler interface {
	AddFriends(context.Context, *AddFriendsReq, *AddFriendsRes) error
	FriendsCount(context.Context, *FriendsCountReq, *FriendsCountRes) error
	GetFriends(context.Context, *GetFriendsReq, *GetFriendsRes) error
}

func RegisterFriendnodeServiceHandler(s server.Server, hdlr FriendnodeServiceHandler, opts ...server.HandlerOption) error {
	type friendnodeService interface {
		AddFriends(ctx context.Context, in *AddFriendsReq, out *AddFriendsRes) error
		FriendsCount(ctx context.Context, in *FriendsCountReq, out *FriendsCountRes) error
		GetFriends(ctx context.Context, in *GetFriendsReq, out *GetFriendsRes) error
	}
	type FriendnodeService struct {
		friendnodeService
	}
	h := &friendnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FriendnodeService{h}, opts...))
}

type friendnodeServiceHandler struct {
	FriendnodeServiceHandler
}

func (h *friendnodeServiceHandler) AddFriends(ctx context.Context, in *AddFriendsReq, out *AddFriendsRes) error {
	return h.FriendnodeServiceHandler.AddFriends(ctx, in, out)
}

func (h *friendnodeServiceHandler) FriendsCount(ctx context.Context, in *FriendsCountReq, out *FriendsCountRes) error {
	return h.FriendnodeServiceHandler.FriendsCount(ctx, in, out)
}

func (h *friendnodeServiceHandler) GetFriends(ctx context.Context, in *GetFriendsReq, out *GetFriendsRes) error {
	return h.FriendnodeServiceHandler.GetFriends(ctx, in, out)
}
