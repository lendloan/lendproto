// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: registernode.proto

package registernode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RegisternodeService service

func NewRegisternodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RegisternodeService service

type RegisternodeService interface {
	// 创建普通用户
	NormalUser(ctx context.Context, in *NormalUserReq, opts ...client.CallOption) (*NormalUserRes, error)
	// 创建合作用户
	CooperatorUser(ctx context.Context, in *CooperatorUserReq, opts ...client.CallOption) (*CooperatorUserRes, error)
	// 添加反馈
	AddFeedback(ctx context.Context, in *AddFeedbackReq, opts ...client.CallOption) (*AddFeedbackRes, error)
	// 获取反馈
	GetFeedback(ctx context.Context, in *GetFeedbackReq, opts ...client.CallOption) (*GetFeedbackRes, error)
}

type registernodeService struct {
	c    client.Client
	name string
}

func NewRegisternodeService(name string, c client.Client) RegisternodeService {
	return &registernodeService{
		c:    c,
		name: name,
	}
}

func (c *registernodeService) NormalUser(ctx context.Context, in *NormalUserReq, opts ...client.CallOption) (*NormalUserRes, error) {
	req := c.c.NewRequest(c.name, "RegisternodeService.NormalUser", in)
	out := new(NormalUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registernodeService) CooperatorUser(ctx context.Context, in *CooperatorUserReq, opts ...client.CallOption) (*CooperatorUserRes, error) {
	req := c.c.NewRequest(c.name, "RegisternodeService.CooperatorUser", in)
	out := new(CooperatorUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registernodeService) AddFeedback(ctx context.Context, in *AddFeedbackReq, opts ...client.CallOption) (*AddFeedbackRes, error) {
	req := c.c.NewRequest(c.name, "RegisternodeService.AddFeedback", in)
	out := new(AddFeedbackRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registernodeService) GetFeedback(ctx context.Context, in *GetFeedbackReq, opts ...client.CallOption) (*GetFeedbackRes, error) {
	req := c.c.NewRequest(c.name, "RegisternodeService.GetFeedback", in)
	out := new(GetFeedbackRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegisternodeService service

type RegisternodeServiceHandler interface {
	// 创建普通用户
	NormalUser(context.Context, *NormalUserReq, *NormalUserRes) error
	// 创建合作用户
	CooperatorUser(context.Context, *CooperatorUserReq, *CooperatorUserRes) error
	// 添加反馈
	AddFeedback(context.Context, *AddFeedbackReq, *AddFeedbackRes) error
	// 获取反馈
	GetFeedback(context.Context, *GetFeedbackReq, *GetFeedbackRes) error
}

func RegisterRegisternodeServiceHandler(s server.Server, hdlr RegisternodeServiceHandler, opts ...server.HandlerOption) error {
	type registernodeService interface {
		NormalUser(ctx context.Context, in *NormalUserReq, out *NormalUserRes) error
		CooperatorUser(ctx context.Context, in *CooperatorUserReq, out *CooperatorUserRes) error
		AddFeedback(ctx context.Context, in *AddFeedbackReq, out *AddFeedbackRes) error
		GetFeedback(ctx context.Context, in *GetFeedbackReq, out *GetFeedbackRes) error
	}
	type RegisternodeService struct {
		registernodeService
	}
	h := &registernodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RegisternodeService{h}, opts...))
}

type registernodeServiceHandler struct {
	RegisternodeServiceHandler
}

func (h *registernodeServiceHandler) NormalUser(ctx context.Context, in *NormalUserReq, out *NormalUserRes) error {
	return h.RegisternodeServiceHandler.NormalUser(ctx, in, out)
}

func (h *registernodeServiceHandler) CooperatorUser(ctx context.Context, in *CooperatorUserReq, out *CooperatorUserRes) error {
	return h.RegisternodeServiceHandler.CooperatorUser(ctx, in, out)
}

func (h *registernodeServiceHandler) AddFeedback(ctx context.Context, in *AddFeedbackReq, out *AddFeedbackRes) error {
	return h.RegisternodeServiceHandler.AddFeedback(ctx, in, out)
}

func (h *registernodeServiceHandler) GetFeedback(ctx context.Context, in *GetFeedbackReq, out *GetFeedbackRes) error {
	return h.RegisternodeServiceHandler.GetFeedback(ctx, in, out)
}
