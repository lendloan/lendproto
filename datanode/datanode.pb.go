// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: datanode.proto

package datanode

import (
	common "github.com/lendloan/lendproto/common"
	rescode "github.com/lendloan/lendproto/rescode"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Phone   string  `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Email   string  `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Account string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	PassWd  string  `protobuf:"bytes,5,opt,name=pass_wd,json=passWd,proto3" json:"pass_wd,omitempty"`
	Status  int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Role    int64   `protobuf:"varint,7,opt,name=role,proto3" json:"role,omitempty"`
	Vip     int64   `protobuf:"varint,8,opt,name=vip,proto3" json:"vip,omitempty"`
	Coin    float64 `protobuf:"fixed64,9,opt,name=coin,proto3" json:"coin,omitempty"`
	RegIp   int64   `protobuf:"varint,10,opt,name=reg_ip,json=regIp,proto3" json:"reg_ip,omitempty"`
	RegAt   string  `protobuf:"bytes,11,opt,name=reg_at,json=regAt,proto3" json:"reg_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *User) GetPassWd() string {
	if x != nil {
		return x.PassWd
	}
	return ""
}

func (x *User) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *User) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *User) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *User) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *User) GetRegIp() int64 {
	if x != nil {
		return x.RegIp
	}
	return 0
}

func (x *User) GetRegAt() string {
	if x != nil {
		return x.RegAt
	}
	return ""
}

type UserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserInfoReq) Reset() {
	*x = UserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoReq) ProtoMessage() {}

func (x *UserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoReq.ProtoReflect.Descriptor instead.
func (*UserInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NewUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   string            `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PassWd    string            `protobuf:"bytes,2,opt,name=pass_wd,json=passWd,proto3" json:"pass_wd,omitempty"`
	Role      int32             `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
	Invitor   string            `protobuf:"bytes,4,opt,name=invitor,proto3" json:"invitor,omitempty"`
	Source    string            `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Contactor string            `protobuf:"bytes,6,opt,name=contactor,proto3" json:"contactor,omitempty"`
	Email     string            `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	RegIp     int64             `protobuf:"varint,8,opt,name=reg_ip,json=regIp,proto3" json:"reg_ip,omitempty"`
	Status    int64             `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	Extra     map[string]string `protobuf:"bytes,10,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NewUserReq) Reset() {
	*x = NewUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserReq) ProtoMessage() {}

func (x *NewUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserReq.ProtoReflect.Descriptor instead.
func (*NewUserReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{2}
}

func (x *NewUserReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *NewUserReq) GetPassWd() string {
	if x != nil {
		return x.PassWd
	}
	return ""
}

func (x *NewUserReq) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *NewUserReq) GetInvitor() string {
	if x != nil {
		return x.Invitor
	}
	return ""
}

func (x *NewUserReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NewUserReq) GetContactor() string {
	if x != nil {
		return x.Contactor
	}
	return ""
}

func (x *NewUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NewUserReq) GetRegIp() int64 {
	if x != nil {
		return x.RegIp
	}
	return 0
}

func (x *NewUserReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NewUserReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids    []int64           `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	Account string            `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Phone   string            `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email   string            `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchUserReq) Reset() {
	*x = SearchUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserReq) ProtoMessage() {}

func (x *SearchUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserReq.ProtoReflect.Descriptor instead.
func (*SearchUserReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{3}
}

func (x *SearchUserReq) GetUids() []int64 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *SearchUserReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SearchUserReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SearchUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SearchUserReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchUserRes) Reset() {
	*x = SearchUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserRes) ProtoMessage() {}

func (x *SearchUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserRes.ProtoReflect.Descriptor instead.
func (*SearchUserRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{4}
}

func (x *SearchUserRes) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *SearchUserRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	User    *User             `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserRes) Reset() {
	*x = UserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRes) ProtoMessage() {}

func (x *UserRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRes.ProtoReflect.Descriptor instead.
func (*UserRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{5}
}

func (x *UserRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *UserRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserRes) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Size     int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Url      string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	CreateAt int64  `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt int64  `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Extra    string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *FileItem) Reset() {
	*x = FileItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileItem) ProtoMessage() {}

func (x *FileItem) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileItem.ProtoReflect.Descriptor instead.
func (*FileItem) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{6}
}

func (x *FileItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FileItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileItem) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileItem) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *FileItem) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *FileItem) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type FileDirReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Path  string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileDirReq) Reset() {
	*x = FileDirReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDirReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirReq) ProtoMessage() {}

func (x *FileDirReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirReq.ProtoReflect.Descriptor instead.
func (*FileDirReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{7}
}

func (x *FileDirReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FileDirReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileDirReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FileDirRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Dirs    []*FileItem  `protobuf:"bytes,3,rep,name=dirs,proto3" json:"dirs,omitempty"`
}

func (x *FileDirRes) Reset() {
	*x = FileDirRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDirRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirRes) ProtoMessage() {}

func (x *FileDirRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirRes.ProtoReflect.Descriptor instead.
func (*FileDirRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{8}
}

func (x *FileDirRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *FileDirRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FileDirRes) GetDirs() []*FileItem {
	if x != nil {
		return x.Dirs
	}
	return nil
}

type AddDirReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddDirReq) Reset() {
	*x = AddDirReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDirReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDirReq) ProtoMessage() {}

func (x *AddDirReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDirReq.ProtoReflect.Descriptor instead.
func (*AddDirReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{9}
}

func (x *AddDirReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddDirReq) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AddDirReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddDirRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *AddDirRes) Reset() {
	*x = AddDirRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDirRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDirRes) ProtoMessage() {}

func (x *AddDirRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDirRes.ProtoReflect.Descriptor instead.
func (*AddDirRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{10}
}

func (x *AddDirRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddDirRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type AddFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Size        int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Path        string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Url         string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Thumb       string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	ContentType string `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *AddFileReq) Reset() {
	*x = AddFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileReq) ProtoMessage() {}

func (x *AddFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileReq.ProtoReflect.Descriptor instead.
func (*AddFileReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{11}
}

func (x *AddFileReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddFileReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddFileReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddFileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddFileReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddFileReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *AddFileReq) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type AddFileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *AddFileRes) Reset() {
	*x = AddFileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileRes) ProtoMessage() {}

func (x *AddFileRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileRes.ProtoReflect.Descriptor instead.
func (*AddFileRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{12}
}

func (x *AddFileRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddFileRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type FileAttrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileAttrReq) Reset() {
	*x = FileAttrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAttrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttrReq) ProtoMessage() {}

func (x *FileAttrReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttrReq.ProtoReflect.Descriptor instead.
func (*FileAttrReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{13}
}

func (x *FileAttrReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FileAttrReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FileAttrRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Capacity int64        `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Number   int32        `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *FileAttrRes) Reset() {
	*x = FileAttrRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAttrRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttrRes) ProtoMessage() {}

func (x *FileAttrRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttrRes.ProtoReflect.Descriptor instead.
func (*FileAttrRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{14}
}

func (x *FileAttrRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *FileAttrRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FileAttrRes) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *FileAttrRes) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ThumbnailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Path  string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ThumbnailReq) Reset() {
	*x = ThumbnailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailReq) ProtoMessage() {}

func (x *ThumbnailReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailReq.ProtoReflect.Descriptor instead.
func (*ThumbnailReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{15}
}

func (x *ThumbnailReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ThumbnailReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ThumbnailReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ThumbnailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Thumb   string       `protobuf:"bytes,3,opt,name=thumb,proto3" json:"thumb,omitempty"`
}

func (x *ThumbnailRes) Reset() {
	*x = ThumbnailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailRes) ProtoMessage() {}

func (x *ThumbnailRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailRes.ProtoReflect.Descriptor instead.
func (*ThumbnailRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{16}
}

func (x *ThumbnailRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *ThumbnailRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ThumbnailRes) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

type SetKeyvalueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Expire int64  `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *SetKeyvalueReq) Reset() {
	*x = SetKeyvalueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeyvalueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyvalueReq) ProtoMessage() {}

func (x *SetKeyvalueReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyvalueReq.ProtoReflect.Descriptor instead.
func (*SetKeyvalueReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{17}
}

func (x *SetKeyvalueReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetKeyvalueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SetKeyvalueReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type SetKeyvalueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *SetKeyvalueRes) Reset() {
	*x = SetKeyvalueRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeyvalueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyvalueRes) ProtoMessage() {}

func (x *SetKeyvalueRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyvalueRes.ProtoReflect.Descriptor instead.
func (*SetKeyvalueRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{18}
}

func (x *SetKeyvalueRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *SetKeyvalueRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type GetKeyvalueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetKeyvalueReq) Reset() {
	*x = GetKeyvalueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyvalueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyvalueReq) ProtoMessage() {}

func (x *GetKeyvalueReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyvalueReq.ProtoReflect.Descriptor instead.
func (*GetKeyvalueReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{19}
}

func (x *GetKeyvalueReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetKeyvalueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Value   string       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetKeyvalueRes) Reset() {
	*x = GetKeyvalueRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyvalueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyvalueRes) ProtoMessage() {}

func (x *GetKeyvalueRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyvalueRes.ProtoReflect.Descriptor instead.
func (*GetKeyvalueRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{20}
}

func (x *GetKeyvalueRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetKeyvalueRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetKeyvalueRes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DelKeyvalueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DelKeyvalueReq) Reset() {
	*x = DelKeyvalueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelKeyvalueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelKeyvalueReq) ProtoMessage() {}

func (x *DelKeyvalueReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelKeyvalueReq.ProtoReflect.Descriptor instead.
func (*DelKeyvalueReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{21}
}

func (x *DelKeyvalueReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DelKeyvalueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *DelKeyvalueRes) Reset() {
	*x = DelKeyvalueRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelKeyvalueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelKeyvalueRes) ProtoMessage() {}

func (x *DelKeyvalueRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelKeyvalueRes.ProtoReflect.Descriptor instead.
func (*DelKeyvalueRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{22}
}

func (x *DelKeyvalueRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *DelKeyvalueRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type SetUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Info  *common.UserInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetUserInfoReq) Reset() {
	*x = SetUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserInfoReq) ProtoMessage() {}

func (x *SetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserInfoReq.ProtoReflect.Descriptor instead.
func (*SetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{23}
}

func (x *SetUserInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SetUserInfoReq) GetInfo() *common.UserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetUserInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetUserInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetUserInfoRes) Reset() {
	*x = SetUserInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserInfoRes) ProtoMessage() {}

func (x *SetUserInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserInfoRes.ProtoReflect.Descriptor instead.
func (*SetUserInfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{24}
}

func (x *SetUserInfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *SetUserInfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetUserInfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserInfoReq) Reset() {
	*x = GetUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoReq) ProtoMessage() {}

func (x *GetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{25}
}

func (x *GetUserInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetUserInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetUserInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Info    *common.UserInfo  `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserInfoRes) Reset() {
	*x = GetUserInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRes) ProtoMessage() {}

func (x *GetUserInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRes.ProtoReflect.Descriptor instead.
func (*GetUserInfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{26}
}

func (x *GetUserInfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetUserInfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetUserInfoRes) GetInfo() *common.UserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetUserInfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetWechatUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Info  *common.WechatUserinfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string      `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetWechatUinfoReq) Reset() {
	*x = SetWechatUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWechatUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWechatUinfoReq) ProtoMessage() {}

func (x *SetWechatUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWechatUinfoReq.ProtoReflect.Descriptor instead.
func (*SetWechatUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{27}
}

func (x *SetWechatUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SetWechatUinfoReq) GetInfo() *common.WechatUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetWechatUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetWechatUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetWechatUinfoRes) Reset() {
	*x = SetWechatUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWechatUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWechatUinfoRes) ProtoMessage() {}

func (x *SetWechatUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWechatUinfoRes.ProtoReflect.Descriptor instead.
func (*SetWechatUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{28}
}

func (x *SetWechatUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *SetWechatUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetWechatUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetWechatUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetWechatUinfoReq) Reset() {
	*x = GetWechatUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWechatUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWechatUinfoReq) ProtoMessage() {}

func (x *GetWechatUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWechatUinfoReq.ProtoReflect.Descriptor instead.
func (*GetWechatUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{29}
}

func (x *GetWechatUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetWechatUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetWechatUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Info    *common.WechatUserinfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetWechatUinfoRes) Reset() {
	*x = GetWechatUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWechatUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWechatUinfoRes) ProtoMessage() {}

func (x *GetWechatUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWechatUinfoRes.ProtoReflect.Descriptor instead.
func (*GetWechatUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{30}
}

func (x *GetWechatUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetWechatUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetWechatUinfoRes) GetInfo() *common.WechatUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetWechatUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetAlipayUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Info  *common.AlipayUserinfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string      `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetAlipayUinfoReq) Reset() {
	*x = SetAlipayUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAlipayUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAlipayUinfoReq) ProtoMessage() {}

func (x *SetAlipayUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAlipayUinfoReq.ProtoReflect.Descriptor instead.
func (*SetAlipayUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{31}
}

func (x *SetAlipayUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SetAlipayUinfoReq) GetInfo() *common.AlipayUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetAlipayUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetAlipayUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetAlipayUinfoRes) Reset() {
	*x = SetAlipayUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAlipayUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAlipayUinfoRes) ProtoMessage() {}

func (x *SetAlipayUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAlipayUinfoRes.ProtoReflect.Descriptor instead.
func (*SetAlipayUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{32}
}

func (x *SetAlipayUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *SetAlipayUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetAlipayUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetAlipayUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAlipayUinfoReq) Reset() {
	*x = GetAlipayUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlipayUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlipayUinfoReq) ProtoMessage() {}

func (x *GetAlipayUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlipayUinfoReq.ProtoReflect.Descriptor instead.
func (*GetAlipayUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{33}
}

func (x *GetAlipayUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetAlipayUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetAlipayUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Info    *common.AlipayUserinfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAlipayUinfoRes) Reset() {
	*x = GetAlipayUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlipayUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlipayUinfoRes) ProtoMessage() {}

func (x *GetAlipayUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlipayUinfoRes.ProtoReflect.Descriptor instead.
func (*GetAlipayUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{34}
}

func (x *GetAlipayUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetAlipayUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetAlipayUinfoRes) GetInfo() *common.AlipayUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetAlipayUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetBaiduEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid     string                `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Entitys []*common.BaiduEntity `protobuf:"bytes,2,rep,name=entitys,proto3" json:"entitys,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetBaiduEntityReq) Reset() {
	*x = SetBaiduEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaiduEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaiduEntityReq) ProtoMessage() {}

func (x *SetBaiduEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaiduEntityReq.ProtoReflect.Descriptor instead.
func (*SetBaiduEntityReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{35}
}

func (x *SetBaiduEntityReq) GetBid() string {
	if x != nil {
		return x.Bid
	}
	return ""
}

func (x *SetBaiduEntityReq) GetEntitys() []*common.BaiduEntity {
	if x != nil {
		return x.Entitys
	}
	return nil
}

func (x *SetBaiduEntityReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetBaiduEntityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetBaiduEntityRes) Reset() {
	*x = SetBaiduEntityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaiduEntityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaiduEntityRes) ProtoMessage() {}

func (x *SetBaiduEntityRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaiduEntityRes.ProtoReflect.Descriptor instead.
func (*SetBaiduEntityRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{36}
}

func (x *SetBaiduEntityRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *SetBaiduEntityRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetBaiduEntityRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid   string            `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Page  int64             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int64             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduEntityReq) Reset() {
	*x = BaiduEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduEntityReq) ProtoMessage() {}

func (x *BaiduEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduEntityReq.ProtoReflect.Descriptor instead.
func (*BaiduEntityReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{37}
}

func (x *BaiduEntityReq) GetBid() string {
	if x != nil {
		return x.Bid
	}
	return ""
}

func (x *BaiduEntityReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BaiduEntityReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BaiduEntityReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduEntityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Page    int64                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size    int64                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Entitys []*common.BaiduEntity `protobuf:"bytes,5,rep,name=entitys,proto3" json:"entitys,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduEntityRes) Reset() {
	*x = BaiduEntityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduEntityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduEntityRes) ProtoMessage() {}

func (x *BaiduEntityRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduEntityRes.ProtoReflect.Descriptor instead.
func (*BaiduEntityRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{38}
}

func (x *BaiduEntityRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *BaiduEntityRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *BaiduEntityRes) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BaiduEntityRes) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BaiduEntityRes) GetEntitys() []*common.BaiduEntity {
	if x != nil {
		return x.Entitys
	}
	return nil
}

func (x *BaiduEntityRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Userid int64             `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Coin   float64           `protobuf:"fixed64,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshUserCoinReq) Reset() {
	*x = RefreshUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshUserCoinReq) ProtoMessage() {}

func (x *RefreshUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshUserCoinReq.ProtoReflect.Descriptor instead.
func (*RefreshUserCoinReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{39}
}

func (x *RefreshUserCoinReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *RefreshUserCoinReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *RefreshUserCoinReq) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RefreshUserCoinReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshUserCoinRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Code    string            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshUserCoinRes) Reset() {
	*x = RefreshUserCoinRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshUserCoinRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshUserCoinRes) ProtoMessage() {}

func (x *RefreshUserCoinRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshUserCoinRes.ProtoReflect.Descriptor instead.
func (*RefreshUserCoinRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{40}
}

func (x *RefreshUserCoinRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *RefreshUserCoinRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RefreshUserCoinRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RefreshUserCoinRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubmitCertReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert  *common.PersonCert `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Extra map[string]string  `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitCertReq) Reset() {
	*x = SubmitCertReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertReq) ProtoMessage() {}

func (x *SubmitCertReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertReq.ProtoReflect.Descriptor instead.
func (*SubmitCertReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{41}
}

func (x *SubmitCertReq) GetCert() *common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *SubmitCertReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubmitCertRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitCertRes) Reset() {
	*x = SubmitCertRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCertRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertRes) ProtoMessage() {}

func (x *SubmitCertRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertRes.ProtoReflect.Descriptor instead.
func (*SubmitCertRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{42}
}

func (x *SubmitCertRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *SubmitCertRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubmitCertRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CertUid  int64             `protobuf:"varint,2,opt,name=cert_uid,json=certUid,proto3" json:"cert_uid,omitempty"`
	CertName string            `protobuf:"bytes,3,opt,name=cert_name,json=certName,proto3" json:"cert_name,omitempty"`
	Status   string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Info     string            `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Extra    map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertStatusReq) Reset() {
	*x = CertStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertStatusReq) ProtoMessage() {}

func (x *CertStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertStatusReq.ProtoReflect.Descriptor instead.
func (*CertStatusReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{43}
}

func (x *CertStatusReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertStatusReq) GetCertUid() int64 {
	if x != nil {
		return x.CertUid
	}
	return 0
}

func (x *CertStatusReq) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *CertStatusReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CertStatusReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *CertStatusReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    *common.PersonCert `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertStatusRes) Reset() {
	*x = CertStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertStatusRes) ProtoMessage() {}

func (x *CertStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertStatusRes.ProtoReflect.Descriptor instead.
func (*CertStatusRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{44}
}

func (x *CertStatusRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *CertStatusRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertStatusRes) GetCert() *common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertStatusRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Idname string            `protobuf:"bytes,3,opt,name=idname,proto3" json:"idname,omitempty"`
	Idnum  string            `protobuf:"bytes,4,opt,name=idnum,proto3" json:"idnum,omitempty"`
	Page   int32             `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Extra  map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertInfoReq) Reset() {
	*x = CertInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfoReq) ProtoMessage() {}

func (x *CertInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfoReq.ProtoReflect.Descriptor instead.
func (*CertInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{45}
}

func (x *CertInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertInfoReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CertInfoReq) GetIdname() string {
	if x != nil {
		return x.Idname
	}
	return ""
}

func (x *CertInfoReq) GetIdnum() string {
	if x != nil {
		return x.Idnum
	}
	return ""
}

func (x *CertInfoReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CertInfoReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CertInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    []*common.PersonCert `protobuf:"bytes,3,rep,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertInfoRes) Reset() {
	*x = CertInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfoRes) ProtoMessage() {}

func (x *CertInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfoRes.ProtoReflect.Descriptor instead.
func (*CertInfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{46}
}

func (x *CertInfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *CertInfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertInfoRes) GetCert() []*common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertInfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertFlowReq) Reset() {
	*x = CertFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertFlowReq) ProtoMessage() {}

func (x *CertFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertFlowReq.ProtoReflect.Descriptor instead.
func (*CertFlowReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{47}
}

func (x *CertFlowReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertFlowReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CertFlowReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CertFlowReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    []*common.PersonCert `protobuf:"bytes,3,rep,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertFlowRes) Reset() {
	*x = CertFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertFlowRes) ProtoMessage() {}

func (x *CertFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertFlowRes.ProtoReflect.Descriptor instead.
func (*CertFlowRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{48}
}

func (x *CertFlowRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *CertFlowRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertFlowRes) GetCert() []*common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertFlowRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddUserLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType  int32             `protobuf:"varint,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	LogInfo  string            `protobuf:"bytes,3,opt,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	CreateAt string            `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Extra    map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddUserLogReq) Reset() {
	*x = AddUserLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserLogReq) ProtoMessage() {}

func (x *AddUserLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserLogReq.ProtoReflect.Descriptor instead.
func (*AddUserLogReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{49}
}

func (x *AddUserLogReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddUserLogReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *AddUserLogReq) GetLogInfo() string {
	if x != nil {
		return x.LogInfo
	}
	return ""
}

func (x *AddUserLogReq) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *AddUserLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddUserLogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddUserLogRes) Reset() {
	*x = AddUserLogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserLogRes) ProtoMessage() {}

func (x *AddUserLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserLogRes.ProtoReflect.Descriptor instead.
func (*AddUserLogRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{50}
}

func (x *AddUserLogRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddUserLogRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddUserLogRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryUserLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType int32             `protobuf:"varint,3,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	Page    int32             `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Extra   map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryUserLogReq) Reset() {
	*x = QueryUserLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserLogReq) ProtoMessage() {}

func (x *QueryUserLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserLogReq.ProtoReflect.Descriptor instead.
func (*QueryUserLogReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{51}
}

func (x *QueryUserLogReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryUserLogReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryUserLogReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *QueryUserLogReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryUserLogReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryUserLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryUserLogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Logs    []*common.UserLog `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryUserLogRes) Reset() {
	*x = QueryUserLogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserLogRes) ProtoMessage() {}

func (x *QueryUserLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserLogRes.ProtoReflect.Descriptor instead.
func (*QueryUserLogRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{52}
}

func (x *QueryUserLogRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *QueryUserLogRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QueryUserLogRes) GetLogs() []*common.UserLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *QueryUserLogRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserLogCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType int32             `protobuf:"varint,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserLogCountReq) Reset() {
	*x = UserLogCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogCountReq) ProtoMessage() {}

func (x *UserLogCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogCountReq.ProtoReflect.Descriptor instead.
func (*UserLogCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{53}
}

func (x *UserLogCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserLogCountReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *UserLogCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserLogCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserLogCountRes) Reset() {
	*x = UserLogCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogCountRes) ProtoMessage() {}

func (x *UserLogCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogCountRes.ProtoReflect.Descriptor instead.
func (*UserLogCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{54}
}

func (x *UserLogCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *UserLogCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserLogCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserLogCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cron  *common.CronItem  `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
	Admin string            `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddTaskReq) Reset() {
	*x = AddTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskReq) ProtoMessage() {}

func (x *AddTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskReq.ProtoReflect.Descriptor instead.
func (*AddTaskReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{55}
}

func (x *AddTaskReq) GetCron() *common.CronItem {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *AddTaskReq) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *AddTaskReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddTaskRes) Reset() {
	*x = AddTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskRes) ProtoMessage() {}

func (x *AddTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskRes.ProtoReflect.Descriptor instead.
func (*AddTaskRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{56}
}

func (x *AddTaskRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddTaskRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddTaskRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repeated bool              `protobuf:"varint,1,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Mutitask bool              `protobuf:"varint,2,opt,name=mutitask,proto3" json:"mutitask,omitempty"`
	StartAt  string            `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Extra    map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskReq) Reset() {
	*x = GetTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReq) ProtoMessage() {}

func (x *GetTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReq.ProtoReflect.Descriptor instead.
func (*GetTaskReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{57}
}

func (x *GetTaskReq) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *GetTaskReq) GetMutitask() bool {
	if x != nil {
		return x.Mutitask
	}
	return false
}

func (x *GetTaskReq) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *GetTaskReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Crons   []*common.CronItem `protobuf:"bytes,3,rep,name=crons,proto3" json:"crons,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskRes) Reset() {
	*x = GetTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRes) ProtoMessage() {}

func (x *GetTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRes.ProtoReflect.Descriptor instead.
func (*GetTaskRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{58}
}

func (x *GetTaskRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetTaskRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetTaskRes) GetCrons() []*common.CronItem {
	if x != nil {
		return x.Crons
	}
	return nil
}

func (x *GetTaskRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repeated bool              `protobuf:"varint,1,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Mutitask bool              `protobuf:"varint,2,opt,name=mutitask,proto3" json:"mutitask,omitempty"`
	StartAt  string            `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Extra    map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskCountReq) Reset() {
	*x = GetTaskCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountReq) ProtoMessage() {}

func (x *GetTaskCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountReq.ProtoReflect.Descriptor instead.
func (*GetTaskCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{59}
}

func (x *GetTaskCountReq) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *GetTaskCountReq) GetMutitask() bool {
	if x != nil {
		return x.Mutitask
	}
	return false
}

func (x *GetTaskCountReq) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *GetTaskCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskCountRes) Reset() {
	*x = GetTaskCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountRes) ProtoMessage() {}

func (x *GetTaskCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountRes.ProtoReflect.Descriptor instead.
func (*GetTaskCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{60}
}

func (x *GetTaskCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetTaskCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetTaskCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetTaskCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateUserinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *common.UpdateUserinfoItem `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string          `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateUserinfoReq) Reset() {
	*x = UpdateUserinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserinfoReq) ProtoMessage() {}

func (x *UpdateUserinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserinfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateUserinfoReq) GetInfo() *common.UpdateUserinfoItem {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UpdateUserinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateUserinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Value   string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateUserinfoRes) Reset() {
	*x = UpdateUserinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserinfoRes) ProtoMessage() {}

func (x *UpdateUserinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserinfoRes.ProtoReflect.Descriptor instead.
func (*UpdateUserinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateUserinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *UpdateUserinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UpdateUserinfoRes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateUserinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddPkgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Address string            `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddPkgReq) Reset() {
	*x = AddPkgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPkgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPkgReq) ProtoMessage() {}

func (x *AddPkgReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPkgReq.ProtoReflect.Descriptor instead.
func (*AddPkgReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{63}
}

func (x *AddPkgReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPkgReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AddPkgReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddPkgReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddPkgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddPkgRes) Reset() {
	*x = AddPkgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPkgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPkgRes) ProtoMessage() {}

func (x *AddPkgRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPkgRes.ProtoReflect.Descriptor instead.
func (*AddPkgRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{64}
}

func (x *AddPkgRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddPkgRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddPkgRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelPkgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelPkgReq) Reset() {
	*x = DelPkgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPkgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPkgReq) ProtoMessage() {}

func (x *DelPkgReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPkgReq.ProtoReflect.Descriptor instead.
func (*DelPkgReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{65}
}

func (x *DelPkgReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DelPkgReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DelPkgReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelPkgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelPkgRes) Reset() {
	*x = DelPkgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPkgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPkgRes) ProtoMessage() {}

func (x *DelPkgRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPkgRes.ProtoReflect.Descriptor instead.
func (*DelPkgRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{66}
}

func (x *DelPkgRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *DelPkgRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *DelPkgRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Page  int64             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int64             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgListReq) Reset() {
	*x = PkgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgListReq) ProtoMessage() {}

func (x *PkgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgListReq.ProtoReflect.Descriptor instead.
func (*PkgListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{67}
}

func (x *PkgListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PkgListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PkgListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PkgListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Version []*common.PkgItem `protobuf:"bytes,3,rep,name=version,proto3" json:"version,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgListRes) Reset() {
	*x = PkgListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgListRes) ProtoMessage() {}

func (x *PkgListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgListRes.ProtoReflect.Descriptor instead.
func (*PkgListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{68}
}

func (x *PkgListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *PkgListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *PkgListRes) GetVersion() []*common.PkgItem {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PkgListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgCountReq) Reset() {
	*x = PkgCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgCountReq) ProtoMessage() {}

func (x *PkgCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgCountReq.ProtoReflect.Descriptor instead.
func (*PkgCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{69}
}

func (x *PkgCountReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PkgCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgCountRes) Reset() {
	*x = PkgCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgCountRes) ProtoMessage() {}

func (x *PkgCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgCountRes.ProtoReflect.Descriptor instead.
func (*PkgCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{70}
}

func (x *PkgCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *PkgCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *PkgCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PkgCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip   int32             `protobuf:"varint,1,opt,name=vip,proto3" json:"vip,omitempty"`   // 等级
	Type  int32             `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 限制类型  0:修改试题  1:添加试题  2:浏览试题  3:下载试题
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipLimitReq) Reset() {
	*x = VipLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLimitReq) ProtoMessage() {}

func (x *VipLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLimitReq.ProtoReflect.Descriptor instead.
func (*VipLimitReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{71}
}

func (x *VipLimitReq) GetVip() int32 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *VipLimitReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VipLimitReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipLimitRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Limit   int64             `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipLimitRes) Reset() {
	*x = VipLimitRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLimitRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLimitRes) ProtoMessage() {}

func (x *VipLimitRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLimitRes.ProtoReflect.Descriptor instead.
func (*VipLimitRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{72}
}

func (x *VipLimitRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *VipLimitRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipLimitRes) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VipLimitRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32              `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32              `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Products *common.VipProduct `protobuf:"bytes,3,opt,name=products,proto3" json:"products,omitempty"`
	Extra    map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipProductReq) Reset() {
	*x = VipProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipProductReq) ProtoMessage() {}

func (x *VipProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipProductReq.ProtoReflect.Descriptor instead.
func (*VipProductReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{73}
}

func (x *VipProductReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipProductReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VipProductReq) GetProducts() *common.VipProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *VipProductReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Products []*common.VipProduct `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	Extra    map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipProductRes) Reset() {
	*x = VipProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipProductRes) ProtoMessage() {}

func (x *VipProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipProductRes.ProtoReflect.Descriptor instead.
func (*VipProductRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{74}
}

func (x *VipProductRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *VipProductRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipProductRes) GetProducts() []*common.VipProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *VipProductRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *common.VipOrder  `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayReq) Reset() {
	*x = VipPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayReq) ProtoMessage() {}

func (x *VipPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayReq.ProtoReflect.Descriptor instead.
func (*VipPayReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{75}
}

func (x *VipPayReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipPayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   *common.VipOrder  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayRes) Reset() {
	*x = VipPayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayRes) ProtoMessage() {}

func (x *VipPayRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayRes.ProtoReflect.Descriptor instead.
func (*VipPayRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{76}
}

func (x *VipPayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *VipPayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipPayRes) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipPayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *common.VipOrder  `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderStatusReq) Reset() {
	*x = VipOrderStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderStatusReq) ProtoMessage() {}

func (x *VipOrderStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderStatusReq.ProtoReflect.Descriptor instead.
func (*VipOrderStatusReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{77}
}

func (x *VipOrderStatusReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderStatusReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   *common.VipOrder  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderStatusRes) Reset() {
	*x = VipOrderStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderStatusRes) ProtoMessage() {}

func (x *VipOrderStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderStatusRes.ProtoReflect.Descriptor instead.
func (*VipOrderStatusRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{78}
}

func (x *VipOrderStatusRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *VipOrderStatusRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipOrderStatusRes) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderStatusRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *common.VipOrder  `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderListReq) Reset() {
	*x = VipOrderListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderListReq) ProtoMessage() {}

func (x *VipOrderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderListReq.ProtoReflect.Descriptor instead.
func (*VipOrderListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{79}
}

func (x *VipOrderListReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipOrderListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VipOrderListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   []*common.VipOrder `protobuf:"bytes,3,rep,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderListRes) Reset() {
	*x = VipOrderListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderListRes) ProtoMessage() {}

func (x *VipOrderListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderListRes.ProtoReflect.Descriptor instead.
func (*VipOrderListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{80}
}

func (x *VipOrderListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *VipOrderListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipOrderListRes) GetOrder() []*common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Op    int32             `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加  2:更新
	Score *common.UserScore `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserScoreReq) Reset() {
	*x = UserScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreReq) ProtoMessage() {}

func (x *UserScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreReq.ProtoReflect.Descriptor instead.
func (*UserScoreReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{81}
}

func (x *UserScoreReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *UserScoreReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *UserScoreReq) GetScore() *common.UserScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *UserScoreReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserScoreRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Score   *common.UserScore `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserScoreRes) Reset() {
	*x = UserScoreRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreRes) ProtoMessage() {}

func (x *UserScoreRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreRes.ProtoReflect.Descriptor instead.
func (*UserScoreRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{82}
}

func (x *UserScoreRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *UserScoreRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserScoreRes) GetScore() *common.UserScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *UserScoreRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserVipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Op    int32             `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加/更新
	Vip   *common.UserVip   `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserVipReq) Reset() {
	*x = UserVipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVipReq) ProtoMessage() {}

func (x *UserVipReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVipReq.ProtoReflect.Descriptor instead.
func (*UserVipReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{83}
}

func (x *UserVipReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *UserVipReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *UserVipReq) GetVip() *common.UserVip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *UserVipReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserVipRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Vip     *common.UserVip   `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserVipRes) Reset() {
	*x = UserVipRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVipRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVipRes) ProtoMessage() {}

func (x *UserVipRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVipRes.ProtoReflect.Descriptor instead.
func (*UserVipRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{84}
}

func (x *UserVipRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *UserVipRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserVipRes) GetVip() *common.UserVip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *UserVipRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipDescReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    int32             `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加/更新
	Desc  *common.VipDesc   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipDescReq) Reset() {
	*x = VipDescReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipDescReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipDescReq) ProtoMessage() {}

func (x *VipDescReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipDescReq.ProtoReflect.Descriptor instead.
func (*VipDescReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{85}
}

func (x *VipDescReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *VipDescReq) GetDesc() *common.VipDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VipDescReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipDescRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Desc    *common.VipDesc   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipDescRes) Reset() {
	*x = VipDescRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipDescRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipDescRes) ProtoMessage() {}

func (x *VipDescRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipDescRes.ProtoReflect.Descriptor instead.
func (*VipDescRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{86}
}

func (x *VipDescRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *VipDescRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipDescRes) GetDesc() *common.VipDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VipDescRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FootLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op      int32             `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加/更新
	FootLog *common.FootLog   `protobuf:"bytes,2,opt,name=foot_log,json=footLog,proto3" json:"foot_log,omitempty"`
	Page    int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FootLogReq) Reset() {
	*x = FootLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLogReq) ProtoMessage() {}

func (x *FootLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLogReq.ProtoReflect.Descriptor instead.
func (*FootLogReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{87}
}

func (x *FootLogReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *FootLogReq) GetFootLog() *common.FootLog {
	if x != nil {
		return x.FootLog
	}
	return nil
}

func (x *FootLogReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FootLogReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FootLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FootLogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Desc    []*common.FootLog `protobuf:"bytes,3,rep,name=desc,proto3" json:"desc,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FootLogRes) Reset() {
	*x = FootLogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLogRes) ProtoMessage() {}

func (x *FootLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLogRes.ProtoReflect.Descriptor instead.
func (*FootLogRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{88}
}

func (x *FootLogRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *FootLogRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FootLogRes) GetDesc() []*common.FootLog {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *FootLogRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddShareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Share  *common.ShareItem `protobuf:"bytes,1,opt,name=share,proto3" json:"share,omitempty"`
	ToUids []int64           `protobuf:"varint,2,rep,packed,name=to_uids,json=toUids,proto3" json:"to_uids,omitempty"`
	Extra  map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddShareReq) Reset() {
	*x = AddShareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShareReq) ProtoMessage() {}

func (x *AddShareReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShareReq.ProtoReflect.Descriptor instead.
func (*AddShareReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{89}
}

func (x *AddShareReq) GetShare() *common.ShareItem {
	if x != nil {
		return x.Share
	}
	return nil
}

func (x *AddShareReq) GetToUids() []int64 {
	if x != nil {
		return x.ToUids
	}
	return nil
}

func (x *AddShareReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddShareRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddShareRes) Reset() {
	*x = AddShareRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShareRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShareRes) ProtoMessage() {}

func (x *AddShareRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShareRes.ProtoReflect.Descriptor instead.
func (*AddShareRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{90}
}

func (x *AddShareRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddShareRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddShareRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryShareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	FromUid int64             `protobuf:"varint,3,opt,name=from_uid,json=fromUid,proto3" json:"from_uid,omitempty"`
	StartAt int64             `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt   int64             `protobuf:"varint,5,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Page    int32             `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Extra   map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryShareReq) Reset() {
	*x = QueryShareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShareReq) ProtoMessage() {}

func (x *QueryShareReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShareReq.ProtoReflect.Descriptor instead.
func (*QueryShareReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{91}
}

func (x *QueryShareReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryShareReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryShareReq) GetFromUid() int64 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *QueryShareReq) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *QueryShareReq) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *QueryShareReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryShareReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryShareReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryShareRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code        `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string              `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Shares  []*common.ShareItem `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
	Extra   map[string]string   `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryShareRes) Reset() {
	*x = QueryShareRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShareRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShareRes) ProtoMessage() {}

func (x *QueryShareRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShareRes.ProtoReflect.Descriptor instead.
func (*QueryShareRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{92}
}

func (x *QueryShareRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *QueryShareRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QueryShareRes) GetShares() []*common.ShareItem {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *QueryShareRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddMeGoodsCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       int64                   `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Category *common.MeGoodsCategory `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Extra    map[string]string       `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddMeGoodsCategoryReq) Reset() {
	*x = AddMeGoodsCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMeGoodsCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMeGoodsCategoryReq) ProtoMessage() {}

func (x *AddMeGoodsCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMeGoodsCategoryReq.ProtoReflect.Descriptor instead.
func (*AddMeGoodsCategoryReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{93}
}

func (x *AddMeGoodsCategoryReq) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *AddMeGoodsCategoryReq) GetCategory() *common.MeGoodsCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *AddMeGoodsCategoryReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddMeGoodsCategoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddMeGoodsCategoryRes) Reset() {
	*x = AddMeGoodsCategoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMeGoodsCategoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMeGoodsCategoryRes) ProtoMessage() {}

func (x *AddMeGoodsCategoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMeGoodsCategoryRes.ProtoReflect.Descriptor instead.
func (*AddMeGoodsCategoryRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{94}
}

func (x *AddMeGoodsCategoryRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddMeGoodsCategoryRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddMeGoodsCategoryRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetMeGoodsCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMeGoodsCategoryReq) Reset() {
	*x = GetMeGoodsCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeGoodsCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeGoodsCategoryReq) ProtoMessage() {}

func (x *GetMeGoodsCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeGoodsCategoryReq.ProtoReflect.Descriptor instead.
func (*GetMeGoodsCategoryReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{95}
}

func (x *GetMeGoodsCategoryReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetMeGoodsCategoryReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetMeGoodsCategoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode   rescode.Code              `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg    string                    `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Categorys []*common.MeGoodsCategory `protobuf:"bytes,3,rep,name=categorys,proto3" json:"categorys,omitempty"`
	Extra     map[string]string         `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMeGoodsCategoryRes) Reset() {
	*x = GetMeGoodsCategoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeGoodsCategoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeGoodsCategoryRes) ProtoMessage() {}

func (x *GetMeGoodsCategoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeGoodsCategoryRes.ProtoReflect.Descriptor instead.
func (*GetMeGoodsCategoryRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{96}
}

func (x *GetMeGoodsCategoryRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetMeGoodsCategoryRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetMeGoodsCategoryRes) GetCategorys() []*common.MeGoodsCategory {
	if x != nil {
		return x.Categorys
	}
	return nil
}

func (x *GetMeGoodsCategoryRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateMeGoodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    int64             `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Goods *common.MeGoods   `protobuf:"bytes,2,opt,name=goods,proto3" json:"goods,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMeGoodsReq) Reset() {
	*x = UpdateMeGoodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeGoodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeGoodsReq) ProtoMessage() {}

func (x *UpdateMeGoodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeGoodsReq.ProtoReflect.Descriptor instead.
func (*UpdateMeGoodsReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateMeGoodsReq) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *UpdateMeGoodsReq) GetGoods() *common.MeGoods {
	if x != nil {
		return x.Goods
	}
	return nil
}

func (x *UpdateMeGoodsReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateMeGoodsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMeGoodsRes) Reset() {
	*x = UpdateMeGoodsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeGoodsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeGoodsRes) ProtoMessage() {}

func (x *UpdateMeGoodsRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeGoodsRes.ProtoReflect.Descriptor instead.
func (*UpdateMeGoodsRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateMeGoodsRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *UpdateMeGoodsRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UpdateMeGoodsRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryMeGoodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryMeGoodsReq) Reset() {
	*x = QueryMeGoodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMeGoodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMeGoodsReq) ProtoMessage() {}

func (x *QueryMeGoodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMeGoodsReq.ProtoReflect.Descriptor instead.
func (*QueryMeGoodsReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{99}
}

func (x *QueryMeGoodsReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryMeGoodsReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryMeGoodsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Goods   []*common.MeGoods `protobuf:"bytes,3,rep,name=goods,proto3" json:"goods,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryMeGoodsRes) Reset() {
	*x = QueryMeGoodsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMeGoodsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMeGoodsRes) ProtoMessage() {}

func (x *QueryMeGoodsRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMeGoodsRes.ProtoReflect.Descriptor instead.
func (*QueryMeGoodsRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{100}
}

func (x *QueryMeGoodsRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *QueryMeGoodsRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QueryMeGoodsRes) GetGoods() []*common.MeGoods {
	if x != nil {
		return x.Goods
	}
	return nil
}

func (x *QueryMeGoodsRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *common.TemplateItem `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Extra    map[string]string    `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateTemplateReq) Reset() {
	*x = UpdateTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTemplateReq) ProtoMessage() {}

func (x *UpdateTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateTemplateReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{101}
}

func (x *UpdateTemplateReq) GetTemplate() *common.TemplateItem {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *UpdateTemplateReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateTemplateRes) Reset() {
	*x = UpdateTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTemplateRes) ProtoMessage() {}

func (x *UpdateTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTemplateRes.ProtoReflect.Descriptor instead.
func (*UpdateTemplateRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{102}
}

func (x *UpdateTemplateRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *UpdateTemplateRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UpdateTemplateRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *common.TemplateItem `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Page     int32                `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32                `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra    map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryTemplateReq) Reset() {
	*x = QueryTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTemplateReq) ProtoMessage() {}

func (x *QueryTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTemplateReq.ProtoReflect.Descriptor instead.
func (*QueryTemplateReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{103}
}

func (x *QueryTemplateReq) GetTemplate() *common.TemplateItem {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *QueryTemplateReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryTemplateReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryTemplateReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode   rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg    string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Templates []*common.TemplateItem `protobuf:"bytes,3,rep,name=templates,proto3" json:"templates,omitempty"`
	Extra     map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryTemplateRes) Reset() {
	*x = QueryTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTemplateRes) ProtoMessage() {}

func (x *QueryTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTemplateRes.ProtoReflect.Descriptor instead.
func (*QueryTemplateRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{104}
}

func (x *QueryTemplateRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *QueryTemplateRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QueryTemplateRes) GetTemplates() []*common.TemplateItem {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *QueryTemplateRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TemplateCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *common.TemplateItem `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Page     int32                `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32                `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra    map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TemplateCountReq) Reset() {
	*x = TemplateCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateCountReq) ProtoMessage() {}

func (x *TemplateCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateCountReq.ProtoReflect.Descriptor instead.
func (*TemplateCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{105}
}

func (x *TemplateCountReq) GetTemplate() *common.TemplateItem {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *TemplateCountReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TemplateCountReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TemplateCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TemplateCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TemplateCountRes) Reset() {
	*x = TemplateCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateCountRes) ProtoMessage() {}

func (x *TemplateCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateCountRes.ProtoReflect.Descriptor instead.
func (*TemplateCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{106}
}

func (x *TemplateCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *TemplateCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TemplateCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TemplateCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareTitleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Title string            `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareTitleReq) Reset() {
	*x = ShareTitleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareTitleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareTitleReq) ProtoMessage() {}

func (x *ShareTitleReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareTitleReq.ProtoReflect.Descriptor instead.
func (*ShareTitleReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{107}
}

func (x *ShareTitleReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShareTitleReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ShareTitleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ShareTitleReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareTitleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareTitleRes) Reset() {
	*x = ShareTitleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareTitleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareTitleRes) ProtoMessage() {}

func (x *ShareTitleRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareTitleRes.ProtoReflect.Descriptor instead.
func (*ShareTitleRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{108}
}

func (x *ShareTitleRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *ShareTitleRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ShareTitleRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareMediaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid   int64                `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Media []*common.ShareImage `protobuf:"bytes,3,rep,name=media,proto3" json:"media,omitempty"`
	Extra map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareMediaReq) Reset() {
	*x = ShareMediaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareMediaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareMediaReq) ProtoMessage() {}

func (x *ShareMediaReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareMediaReq.ProtoReflect.Descriptor instead.
func (*ShareMediaReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{109}
}

func (x *ShareMediaReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShareMediaReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ShareMediaReq) GetMedia() []*common.ShareImage {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ShareMediaReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareMediaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareMediaRes) Reset() {
	*x = ShareMediaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareMediaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareMediaRes) ProtoMessage() {}

func (x *ShareMediaRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareMediaRes.ProtoReflect.Descriptor instead.
func (*ShareMediaRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{110}
}

func (x *ShareMediaRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *ShareMediaRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ShareMediaRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareUidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	ToUids []int64           `protobuf:"varint,3,rep,packed,name=to_uids,json=toUids,proto3" json:"to_uids,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareUidsReq) Reset() {
	*x = ShareUidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareUidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareUidsReq) ProtoMessage() {}

func (x *ShareUidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareUidsReq.ProtoReflect.Descriptor instead.
func (*ShareUidsReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{111}
}

func (x *ShareUidsReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShareUidsReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ShareUidsReq) GetToUids() []int64 {
	if x != nil {
		return x.ToUids
	}
	return nil
}

func (x *ShareUidsReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareUidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareUidsRes) Reset() {
	*x = ShareUidsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareUidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareUidsRes) ProtoMessage() {}

func (x *ShareUidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareUidsRes.ProtoReflect.Descriptor instead.
func (*ShareUidsRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{112}
}

func (x *ShareUidsRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *ShareUidsRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ShareUidsRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelShareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelShareReq) Reset() {
	*x = DelShareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelShareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelShareReq) ProtoMessage() {}

func (x *DelShareReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelShareReq.ProtoReflect.Descriptor instead.
func (*DelShareReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{113}
}

func (x *DelShareReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelShareReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DelShareReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelShareRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelShareRes) Reset() {
	*x = DelShareRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelShareRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelShareRes) ProtoMessage() {}

func (x *DelShareRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelShareRes.ProtoReflect.Descriptor instead.
func (*DelShareRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{114}
}

func (x *DelShareRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *DelShareRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *DelShareRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelTemplateReq) Reset() {
	*x = DelTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTemplateReq) ProtoMessage() {}

func (x *DelTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTemplateReq.ProtoReflect.Descriptor instead.
func (*DelTemplateReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{115}
}

func (x *DelTemplateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelTemplateReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DelTemplateReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelTemplateRes) Reset() {
	*x = DelTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTemplateRes) ProtoMessage() {}

func (x *DelTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTemplateRes.ProtoReflect.Descriptor instead.
func (*DelTemplateRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{116}
}

func (x *DelTemplateRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *DelTemplateRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *DelTemplateRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid1  int64             `protobuf:"varint,1,opt,name=uid1,proto3" json:"uid1,omitempty"`
	Uid2  int64             `protobuf:"varint,2,opt,name=uid2,proto3" json:"uid2,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendsReq) Reset() {
	*x = AddFriendsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendsReq) ProtoMessage() {}

func (x *AddFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendsReq.ProtoReflect.Descriptor instead.
func (*AddFriendsReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{117}
}

func (x *AddFriendsReq) GetUid1() int64 {
	if x != nil {
		return x.Uid1
	}
	return 0
}

func (x *AddFriendsReq) GetUid2() int64 {
	if x != nil {
		return x.Uid2
	}
	return 0
}

func (x *AddFriendsReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendsRes) Reset() {
	*x = AddFriendsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendsRes) ProtoMessage() {}

func (x *AddFriendsRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendsRes.ProtoReflect.Descriptor instead.
func (*AddFriendsRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{118}
}

func (x *AddFriendsRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddFriendsRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddFriendsRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FriendsCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendsCountReq) Reset() {
	*x = FriendsCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendsCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendsCountReq) ProtoMessage() {}

func (x *FriendsCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendsCountReq.ProtoReflect.Descriptor instead.
func (*FriendsCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{119}
}

func (x *FriendsCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FriendsCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FriendsCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendsCountRes) Reset() {
	*x = FriendsCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendsCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendsCountRes) ProtoMessage() {}

func (x *FriendsCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendsCountRes.ProtoReflect.Descriptor instead.
func (*FriendsCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{120}
}

func (x *FriendsCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *FriendsCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FriendsCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FriendsCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetFriendsReq) Reset() {
	*x = GetFriendsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsReq) ProtoMessage() {}

func (x *GetFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsReq.ProtoReflect.Descriptor instead.
func (*GetFriendsReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{121}
}

func (x *GetFriendsReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetFriendsReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetFriendsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Friends []*common.UserInfo `protobuf:"bytes,3,rep,name=friends,proto3" json:"friends,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetFriendsRes) Reset() {
	*x = GetFriendsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsRes) ProtoMessage() {}

func (x *GetFriendsRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsRes.ProtoReflect.Descriptor instead.
func (*GetFriendsRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{122}
}

func (x *GetFriendsRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GetFriendsRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetFriendsRes) GetFriends() []*common.UserInfo {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *GetFriendsRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddLendLoanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid      int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Llid     int64             `protobuf:"varint,3,opt,name=llid,proto3" json:"llid,omitempty"`
	Lendloan *common.LendLoan  `protobuf:"bytes,4,opt,name=lendloan,proto3" json:"lendloan,omitempty"`
	Extra    map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddLendLoanReq) Reset() {
	*x = AddLendLoanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLendLoanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLendLoanReq) ProtoMessage() {}

func (x *AddLendLoanReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLendLoanReq.ProtoReflect.Descriptor instead.
func (*AddLendLoanReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{123}
}

func (x *AddLendLoanReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AddLendLoanReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddLendLoanReq) GetLlid() int64 {
	if x != nil {
		return x.Llid
	}
	return 0
}

func (x *AddLendLoanReq) GetLendloan() *common.LendLoan {
	if x != nil {
		return x.Lendloan
	}
	return nil
}

func (x *AddLendLoanReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddLendLoanRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddLendLoanRes) Reset() {
	*x = AddLendLoanRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLendLoanRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLendLoanRes) ProtoMessage() {}

func (x *AddLendLoanRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLendLoanRes.ProtoReflect.Descriptor instead.
func (*AddLendLoanRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{124}
}

func (x *AddLendLoanRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *AddLendLoanRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddLendLoanRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CreateGatherReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	NdUid  int64             `protobuf:"varint,2,opt,name=nd_uid,json=ndUid,proto3" json:"nd_uid,omitempty"`
	AnUid  int64             `protobuf:"varint,3,opt,name=an_uid,json=anUid,proto3" json:"an_uid,omitempty"`
	Expire int64             `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
	Desc   string            `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Remark string            `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	Extra  map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateGatherReq) Reset() {
	*x = CreateGatherReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGatherReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGatherReq) ProtoMessage() {}

func (x *CreateGatherReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGatherReq.ProtoReflect.Descriptor instead.
func (*CreateGatherReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{125}
}

func (x *CreateGatherReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CreateGatherReq) GetNdUid() int64 {
	if x != nil {
		return x.NdUid
	}
	return 0
}

func (x *CreateGatherReq) GetAnUid() int64 {
	if x != nil {
		return x.AnUid
	}
	return 0
}

func (x *CreateGatherReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *CreateGatherReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateGatherReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateGatherReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CreateGatherRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Llid    int64             `protobuf:"varint,3,opt,name=llid,proto3" json:"llid,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateGatherRes) Reset() {
	*x = CreateGatherRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGatherRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGatherRes) ProtoMessage() {}

func (x *CreateGatherRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGatherRes.ProtoReflect.Descriptor instead.
func (*CreateGatherRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{126}
}

func (x *CreateGatherRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *CreateGatherRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CreateGatherRes) GetLlid() int64 {
	if x != nil {
		return x.Llid
	}
	return 0
}

func (x *CreateGatherRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LendLoanGatherReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LendLoanGatherReq) Reset() {
	*x = LendLoanGatherReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LendLoanGatherReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LendLoanGatherReq) ProtoMessage() {}

func (x *LendLoanGatherReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LendLoanGatherReq.ProtoReflect.Descriptor instead.
func (*LendLoanGatherReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{127}
}

func (x *LendLoanGatherReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *LendLoanGatherReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LendLoanGatherReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LendLoanGatherReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LendLoanGatherReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LendLoanGatherRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Gathers []*common.Gather  `protobuf:"bytes,3,rep,name=gathers,proto3" json:"gathers,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LendLoanGatherRes) Reset() {
	*x = LendLoanGatherRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LendLoanGatherRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LendLoanGatherRes) ProtoMessage() {}

func (x *LendLoanGatherRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LendLoanGatherRes.ProtoReflect.Descriptor instead.
func (*LendLoanGatherRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{128}
}

func (x *LendLoanGatherRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *LendLoanGatherRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LendLoanGatherRes) GetGathers() []*common.Gather {
	if x != nil {
		return x.Gathers
	}
	return nil
}

func (x *LendLoanGatherRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LendLoanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Gid   int64             `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Uid   int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LendLoanReq) Reset() {
	*x = LendLoanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LendLoanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LendLoanReq) ProtoMessage() {}

func (x *LendLoanReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LendLoanReq.ProtoReflect.Descriptor instead.
func (*LendLoanReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{129}
}

func (x *LendLoanReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *LendLoanReq) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *LendLoanReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LendLoanReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LendLoanRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode   rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg    string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Gather    *common.LendLoanGather `protobuf:"bytes,3,opt,name=gather,proto3" json:"gather,omitempty"`
	Lendloans []*common.LendLoan     `protobuf:"bytes,4,rep,name=lendloans,proto3" json:"lendloans,omitempty"`
	Extra     map[string]string      `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LendLoanRes) Reset() {
	*x = LendLoanRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LendLoanRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LendLoanRes) ProtoMessage() {}

func (x *LendLoanRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LendLoanRes.ProtoReflect.Descriptor instead.
func (*LendLoanRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{130}
}

func (x *LendLoanRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *LendLoanRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LendLoanRes) GetGather() *common.LendLoanGather {
	if x != nil {
		return x.Gather
	}
	return nil
}

func (x *LendLoanRes) GetLendloans() []*common.LendLoan {
	if x != nil {
		return x.Lendloans
	}
	return nil
}

func (x *LendLoanRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GatherStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize      `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id     int64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid    int64                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Status common.LendLoan_Status `protobuf:"varint,4,opt,name=status,proto3,enum=common.LendLoan_Status" json:"status,omitempty"`
	Extra  map[string]string      `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GatherStatusReq) Reset() {
	*x = GatherStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherStatusReq) ProtoMessage() {}

func (x *GatherStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherStatusReq.ProtoReflect.Descriptor instead.
func (*GatherStatusReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{131}
}

func (x *GatherStatusReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GatherStatusReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GatherStatusReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GatherStatusReq) GetStatus() common.LendLoan_Status {
	if x != nil {
		return x.Status
	}
	return common.LendLoan_Status(0)
}

func (x *GatherStatusReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GatherStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GatherStatusRes) Reset() {
	*x = GatherStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherStatusRes) ProtoMessage() {}

func (x *GatherStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherStatusRes.ProtoReflect.Descriptor instead.
func (*GatherStatusRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{132}
}

func (x *GatherStatusRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *GatherStatusRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GatherStatusRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LendLoanStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize      `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id     int64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid    int64                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Status common.LendLoan_Status `protobuf:"varint,4,opt,name=status,proto3,enum=common.LendLoan_Status" json:"status,omitempty"`
	Extra  map[string]string      `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LendLoanStatusReq) Reset() {
	*x = LendLoanStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LendLoanStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LendLoanStatusReq) ProtoMessage() {}

func (x *LendLoanStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LendLoanStatusReq.ProtoReflect.Descriptor instead.
func (*LendLoanStatusReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{133}
}

func (x *LendLoanStatusReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *LendLoanStatusReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LendLoanStatusReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LendLoanStatusReq) GetStatus() common.LendLoan_Status {
	if x != nil {
		return x.Status
	}
	return common.LendLoan_Status(0)
}

func (x *LendLoanStatusReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LendLoanStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LendLoanStatusRes) Reset() {
	*x = LendLoanStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LendLoanStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LendLoanStatusRes) ProtoMessage() {}

func (x *LendLoanStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LendLoanStatusRes.ProtoReflect.Descriptor instead.
func (*LendLoanStatusRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{134}
}

func (x *LendLoanStatusRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *LendLoanStatusRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LendLoanStatusRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LlendNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Name  string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LlendNameReq) Reset() {
	*x = LlendNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LlendNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LlendNameReq) ProtoMessage() {}

func (x *LlendNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LlendNameReq.ProtoReflect.Descriptor instead.
func (*LlendNameReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{135}
}

func (x *LlendNameReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LlendNameReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LlendNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LlendNameReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LlendNameRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LlendNameRes) Reset() {
	*x = LlendNameRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LlendNameRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LlendNameRes) ProtoMessage() {}

func (x *LlendNameRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LlendNameRes.ProtoReflect.Descriptor instead.
func (*LlendNameRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{136}
}

func (x *LlendNameRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *LlendNameRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LlendNameRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LlendMediaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid   int64                `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Media []*common.ShareImage `protobuf:"bytes,3,rep,name=media,proto3" json:"media,omitempty"`
	Extra map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LlendMediaReq) Reset() {
	*x = LlendMediaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LlendMediaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LlendMediaReq) ProtoMessage() {}

func (x *LlendMediaReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LlendMediaReq.ProtoReflect.Descriptor instead.
func (*LlendMediaReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{137}
}

func (x *LlendMediaReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LlendMediaReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LlendMediaReq) GetMedia() []*common.ShareImage {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *LlendMediaReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LlendMediaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LlendMediaRes) Reset() {
	*x = LlendMediaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LlendMediaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LlendMediaRes) ProtoMessage() {}

func (x *LlendMediaRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LlendMediaRes.ProtoReflect.Descriptor instead.
func (*LlendMediaRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{138}
}

func (x *LlendMediaRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code(0)
}

func (x *LlendMediaRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LlendMediaRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_datanode_proto protoreflect.FileDescriptor

var file_datanode_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x57, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x41, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x02, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x57, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x75, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x26, 0x0a, 0x04, 0x64, 0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x64, 0x69, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0c, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x22, 0x50, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x22, 0x51, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x67, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x51, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x39,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc,
	0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x69,
	0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42,
	0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3c,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x69, 0x64,
	0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61,
	0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x69,
	0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61,
	0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec,
	0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xff, 0x01,
	0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x64, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x64, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe8, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x26, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x69, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x69, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x72,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x63, 0x72, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x69, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x69, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xde, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe2, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe9, 0x01, 0x0a, 0x0a, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x29, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6b, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a,
	0x0b, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x0b,
	0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a,
	0x0d, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x56,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x70, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56,
	0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3,
	0x01, 0x0a, 0x11, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x0f,
	0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x27, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x03, 0x76, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x21,
	0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x03, 0x76, 0x69,
	0x70, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56,
	0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01,
	0x0a, 0x0a, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x08,
	0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x07, 0x66, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a,
	0x02, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x09,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x32,
	0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x30,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe0, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x69, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc2, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x55, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab,
	0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x75, 0x69, 0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x75, 0x69, 0x64, 0x32, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xde, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x95, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6c, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6c,
	0x65, 0x6e, 0x64, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52,
	0x08, 0x6c, 0x65, 0x6e, 0x64, 0x6c, 0x6f, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6,
	0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6e, 0x64, 0x55, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x6e, 0x55, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c,
	0x6c, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x4c, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x61, 0x6e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x28, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0,
	0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x2e, 0x0a, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61,
	0x6e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x09, 0x6c, 0x65, 0x6e, 0x64, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x6e, 0x64,
	0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x09, 0x6c, 0x65, 0x6e, 0x64, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x12,
	0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x81, 0x02, 0x0a, 0x0f, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e,
	0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x85, 0x02, 0x0a, 0x11, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61,
	0x6e, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x4c, 0x6c, 0x65, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6c, 0x65, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x4c, 0x6c, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6c,
	0x65, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x4c, 0x6c, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c,
	0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x4c, 0x6c, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xb9, 0x24, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x4f,
	0x6e, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x41, 0x64, 0x64, 0x12, 0x13,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x59, 0x75, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55,
	0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0b, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x43, 0x65, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x06, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x12, 0x13, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x50, 0x6b, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x08, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x56,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x07, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79,
	0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e,
	0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x56, 0x69,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x12, 0x14, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x46,
	0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x17,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x17, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x69, 0x64, 0x73, 0x12, 0x16,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x12, 0x18, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x4c, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e,
	0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x47, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x4c, 0x65, 0x6e, 0x64,
	0x4c, 0x6f, 0x61, 0x6e, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e,
	0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x4c, 0x6c,
	0x65, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4c, 0x6c, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6c, 0x65, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x6c, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4c, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6c, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_datanode_proto_rawDescOnce sync.Once
	file_datanode_proto_rawDescData = file_datanode_proto_rawDesc
)

func file_datanode_proto_rawDescGZIP() []byte {
	file_datanode_proto_rawDescOnce.Do(func() {
		file_datanode_proto_rawDescData = protoimpl.X.CompressGZIP(file_datanode_proto_rawDescData)
	})
	return file_datanode_proto_rawDescData
}

var file_datanode_proto_msgTypes = make([]protoimpl.MessageInfo, 263)
var file_datanode_proto_goTypes = []interface{}{
	(*User)(nil),                      // 0: datanode.User
	(*UserInfoReq)(nil),               // 1: datanode.UserInfoReq
	(*NewUserReq)(nil),                // 2: datanode.NewUserReq
	(*SearchUserReq)(nil),             // 3: datanode.SearchUserReq
	(*SearchUserRes)(nil),             // 4: datanode.SearchUserRes
	(*UserRes)(nil),                   // 5: datanode.UserRes
	(*FileItem)(nil),                  // 6: datanode.FileItem
	(*FileDirReq)(nil),                // 7: datanode.FileDirReq
	(*FileDirRes)(nil),                // 8: datanode.FileDirRes
	(*AddDirReq)(nil),                 // 9: datanode.AddDirReq
	(*AddDirRes)(nil),                 // 10: datanode.AddDirRes
	(*AddFileReq)(nil),                // 11: datanode.AddFileReq
	(*AddFileRes)(nil),                // 12: datanode.AddFileRes
	(*FileAttrReq)(nil),               // 13: datanode.FileAttrReq
	(*FileAttrRes)(nil),               // 14: datanode.FileAttrRes
	(*ThumbnailReq)(nil),              // 15: datanode.ThumbnailReq
	(*ThumbnailRes)(nil),              // 16: datanode.ThumbnailRes
	(*SetKeyvalueReq)(nil),            // 17: datanode.SetKeyvalueReq
	(*SetKeyvalueRes)(nil),            // 18: datanode.SetKeyvalueRes
	(*GetKeyvalueReq)(nil),            // 19: datanode.GetKeyvalueReq
	(*GetKeyvalueRes)(nil),            // 20: datanode.GetKeyvalueRes
	(*DelKeyvalueReq)(nil),            // 21: datanode.DelKeyvalueReq
	(*DelKeyvalueRes)(nil),            // 22: datanode.DelKeyvalueRes
	(*SetUserInfoReq)(nil),            // 23: datanode.SetUserInfoReq
	(*SetUserInfoRes)(nil),            // 24: datanode.SetUserInfoRes
	(*GetUserInfoReq)(nil),            // 25: datanode.GetUserInfoReq
	(*GetUserInfoRes)(nil),            // 26: datanode.GetUserInfoRes
	(*SetWechatUinfoReq)(nil),         // 27: datanode.SetWechatUinfoReq
	(*SetWechatUinfoRes)(nil),         // 28: datanode.SetWechatUinfoRes
	(*GetWechatUinfoReq)(nil),         // 29: datanode.GetWechatUinfoReq
	(*GetWechatUinfoRes)(nil),         // 30: datanode.GetWechatUinfoRes
	(*SetAlipayUinfoReq)(nil),         // 31: datanode.SetAlipayUinfoReq
	(*SetAlipayUinfoRes)(nil),         // 32: datanode.SetAlipayUinfoRes
	(*GetAlipayUinfoReq)(nil),         // 33: datanode.GetAlipayUinfoReq
	(*GetAlipayUinfoRes)(nil),         // 34: datanode.GetAlipayUinfoRes
	(*SetBaiduEntityReq)(nil),         // 35: datanode.SetBaiduEntityReq
	(*SetBaiduEntityRes)(nil),         // 36: datanode.SetBaiduEntityRes
	(*BaiduEntityReq)(nil),            // 37: datanode.BaiduEntityReq
	(*BaiduEntityRes)(nil),            // 38: datanode.BaiduEntityRes
	(*RefreshUserCoinReq)(nil),        // 39: datanode.RefreshUserCoinReq
	(*RefreshUserCoinRes)(nil),        // 40: datanode.RefreshUserCoinRes
	(*SubmitCertReq)(nil),             // 41: datanode.SubmitCertReq
	(*SubmitCertRes)(nil),             // 42: datanode.SubmitCertRes
	(*CertStatusReq)(nil),             // 43: datanode.CertStatusReq
	(*CertStatusRes)(nil),             // 44: datanode.CertStatusRes
	(*CertInfoReq)(nil),               // 45: datanode.CertInfoReq
	(*CertInfoRes)(nil),               // 46: datanode.CertInfoRes
	(*CertFlowReq)(nil),               // 47: datanode.CertFlowReq
	(*CertFlowRes)(nil),               // 48: datanode.CertFlowRes
	(*AddUserLogReq)(nil),             // 49: datanode.AddUserLogReq
	(*AddUserLogRes)(nil),             // 50: datanode.AddUserLogRes
	(*QueryUserLogReq)(nil),           // 51: datanode.QueryUserLogReq
	(*QueryUserLogRes)(nil),           // 52: datanode.QueryUserLogRes
	(*UserLogCountReq)(nil),           // 53: datanode.UserLogCountReq
	(*UserLogCountRes)(nil),           // 54: datanode.UserLogCountRes
	(*AddTaskReq)(nil),                // 55: datanode.AddTaskReq
	(*AddTaskRes)(nil),                // 56: datanode.AddTaskRes
	(*GetTaskReq)(nil),                // 57: datanode.GetTaskReq
	(*GetTaskRes)(nil),                // 58: datanode.GetTaskRes
	(*GetTaskCountReq)(nil),           // 59: datanode.GetTaskCountReq
	(*GetTaskCountRes)(nil),           // 60: datanode.GetTaskCountRes
	(*UpdateUserinfoReq)(nil),         // 61: datanode.UpdateUserinfoReq
	(*UpdateUserinfoRes)(nil),         // 62: datanode.UpdateUserinfoRes
	(*AddPkgReq)(nil),                 // 63: datanode.AddPkgReq
	(*AddPkgRes)(nil),                 // 64: datanode.AddPkgRes
	(*DelPkgReq)(nil),                 // 65: datanode.DelPkgReq
	(*DelPkgRes)(nil),                 // 66: datanode.DelPkgRes
	(*PkgListReq)(nil),                // 67: datanode.PkgListReq
	(*PkgListRes)(nil),                // 68: datanode.PkgListRes
	(*PkgCountReq)(nil),               // 69: datanode.PkgCountReq
	(*PkgCountRes)(nil),               // 70: datanode.PkgCountRes
	(*VipLimitReq)(nil),               // 71: datanode.VipLimitReq
	(*VipLimitRes)(nil),               // 72: datanode.VipLimitRes
	(*VipProductReq)(nil),             // 73: datanode.VipProductReq
	(*VipProductRes)(nil),             // 74: datanode.VipProductRes
	(*VipPayReq)(nil),                 // 75: datanode.VipPayReq
	(*VipPayRes)(nil),                 // 76: datanode.VipPayRes
	(*VipOrderStatusReq)(nil),         // 77: datanode.VipOrderStatusReq
	(*VipOrderStatusRes)(nil),         // 78: datanode.VipOrderStatusRes
	(*VipOrderListReq)(nil),           // 79: datanode.VipOrderListReq
	(*VipOrderListRes)(nil),           // 80: datanode.VipOrderListRes
	(*UserScoreReq)(nil),              // 81: datanode.UserScoreReq
	(*UserScoreRes)(nil),              // 82: datanode.UserScoreRes
	(*UserVipReq)(nil),                // 83: datanode.UserVipReq
	(*UserVipRes)(nil),                // 84: datanode.UserVipRes
	(*VipDescReq)(nil),                // 85: datanode.VipDescReq
	(*VipDescRes)(nil),                // 86: datanode.VipDescRes
	(*FootLogReq)(nil),                // 87: datanode.FootLogReq
	(*FootLogRes)(nil),                // 88: datanode.FootLogRes
	(*AddShareReq)(nil),               // 89: datanode.AddShareReq
	(*AddShareRes)(nil),               // 90: datanode.AddShareRes
	(*QueryShareReq)(nil),             // 91: datanode.QueryShareReq
	(*QueryShareRes)(nil),             // 92: datanode.QueryShareRes
	(*AddMeGoodsCategoryReq)(nil),     // 93: datanode.AddMeGoodsCategoryReq
	(*AddMeGoodsCategoryRes)(nil),     // 94: datanode.AddMeGoodsCategoryRes
	(*GetMeGoodsCategoryReq)(nil),     // 95: datanode.GetMeGoodsCategoryReq
	(*GetMeGoodsCategoryRes)(nil),     // 96: datanode.GetMeGoodsCategoryRes
	(*UpdateMeGoodsReq)(nil),          // 97: datanode.UpdateMeGoodsReq
	(*UpdateMeGoodsRes)(nil),          // 98: datanode.UpdateMeGoodsRes
	(*QueryMeGoodsReq)(nil),           // 99: datanode.QueryMeGoodsReq
	(*QueryMeGoodsRes)(nil),           // 100: datanode.QueryMeGoodsRes
	(*UpdateTemplateReq)(nil),         // 101: datanode.UpdateTemplateReq
	(*UpdateTemplateRes)(nil),         // 102: datanode.UpdateTemplateRes
	(*QueryTemplateReq)(nil),          // 103: datanode.QueryTemplateReq
	(*QueryTemplateRes)(nil),          // 104: datanode.QueryTemplateRes
	(*TemplateCountReq)(nil),          // 105: datanode.TemplateCountReq
	(*TemplateCountRes)(nil),          // 106: datanode.TemplateCountRes
	(*ShareTitleReq)(nil),             // 107: datanode.ShareTitleReq
	(*ShareTitleRes)(nil),             // 108: datanode.ShareTitleRes
	(*ShareMediaReq)(nil),             // 109: datanode.ShareMediaReq
	(*ShareMediaRes)(nil),             // 110: datanode.ShareMediaRes
	(*ShareUidsReq)(nil),              // 111: datanode.ShareUidsReq
	(*ShareUidsRes)(nil),              // 112: datanode.ShareUidsRes
	(*DelShareReq)(nil),               // 113: datanode.DelShareReq
	(*DelShareRes)(nil),               // 114: datanode.DelShareRes
	(*DelTemplateReq)(nil),            // 115: datanode.DelTemplateReq
	(*DelTemplateRes)(nil),            // 116: datanode.DelTemplateRes
	(*AddFriendsReq)(nil),             // 117: datanode.AddFriendsReq
	(*AddFriendsRes)(nil),             // 118: datanode.AddFriendsRes
	(*FriendsCountReq)(nil),           // 119: datanode.FriendsCountReq
	(*FriendsCountRes)(nil),           // 120: datanode.FriendsCountRes
	(*GetFriendsReq)(nil),             // 121: datanode.GetFriendsReq
	(*GetFriendsRes)(nil),             // 122: datanode.GetFriendsRes
	(*AddLendLoanReq)(nil),            // 123: datanode.AddLendLoanReq
	(*AddLendLoanRes)(nil),            // 124: datanode.AddLendLoanRes
	(*CreateGatherReq)(nil),           // 125: datanode.CreateGatherReq
	(*CreateGatherRes)(nil),           // 126: datanode.CreateGatherRes
	(*LendLoanGatherReq)(nil),         // 127: datanode.LendLoanGatherReq
	(*LendLoanGatherRes)(nil),         // 128: datanode.LendLoanGatherRes
	(*LendLoanReq)(nil),               // 129: datanode.LendLoanReq
	(*LendLoanRes)(nil),               // 130: datanode.LendLoanRes
	(*GatherStatusReq)(nil),           // 131: datanode.GatherStatusReq
	(*GatherStatusRes)(nil),           // 132: datanode.GatherStatusRes
	(*LendLoanStatusReq)(nil),         // 133: datanode.LendLoanStatusReq
	(*LendLoanStatusRes)(nil),         // 134: datanode.LendLoanStatusRes
	(*LlendNameReq)(nil),              // 135: datanode.LlendNameReq
	(*LlendNameRes)(nil),              // 136: datanode.LlendNameRes
	(*LlendMediaReq)(nil),             // 137: datanode.LlendMediaReq
	(*LlendMediaRes)(nil),             // 138: datanode.LlendMediaRes
	nil,                               // 139: datanode.UserInfoReq.ExtraEntry
	nil,                               // 140: datanode.NewUserReq.ExtraEntry
	nil,                               // 141: datanode.SearchUserReq.ExtraEntry
	nil,                               // 142: datanode.SearchUserRes.ExtraEntry
	nil,                               // 143: datanode.UserRes.ExtraEntry
	nil,                               // 144: datanode.FileDirReq.ExtraEntry
	nil,                               // 145: datanode.FileAttrReq.ExtraEntry
	nil,                               // 146: datanode.ThumbnailReq.ExtraEntry
	nil,                               // 147: datanode.SetUserInfoReq.ExtraEntry
	nil,                               // 148: datanode.SetUserInfoRes.ExtraEntry
	nil,                               // 149: datanode.GetUserInfoReq.ExtraEntry
	nil,                               // 150: datanode.GetUserInfoRes.ExtraEntry
	nil,                               // 151: datanode.SetWechatUinfoReq.ExtraEntry
	nil,                               // 152: datanode.SetWechatUinfoRes.ExtraEntry
	nil,                               // 153: datanode.GetWechatUinfoReq.ExtraEntry
	nil,                               // 154: datanode.GetWechatUinfoRes.ExtraEntry
	nil,                               // 155: datanode.SetAlipayUinfoReq.ExtraEntry
	nil,                               // 156: datanode.SetAlipayUinfoRes.ExtraEntry
	nil,                               // 157: datanode.GetAlipayUinfoReq.ExtraEntry
	nil,                               // 158: datanode.GetAlipayUinfoRes.ExtraEntry
	nil,                               // 159: datanode.SetBaiduEntityReq.ExtraEntry
	nil,                               // 160: datanode.SetBaiduEntityRes.ExtraEntry
	nil,                               // 161: datanode.BaiduEntityReq.ExtraEntry
	nil,                               // 162: datanode.BaiduEntityRes.ExtraEntry
	nil,                               // 163: datanode.RefreshUserCoinReq.ExtraEntry
	nil,                               // 164: datanode.RefreshUserCoinRes.ExtraEntry
	nil,                               // 165: datanode.SubmitCertReq.ExtraEntry
	nil,                               // 166: datanode.SubmitCertRes.ExtraEntry
	nil,                               // 167: datanode.CertStatusReq.ExtraEntry
	nil,                               // 168: datanode.CertStatusRes.ExtraEntry
	nil,                               // 169: datanode.CertInfoReq.ExtraEntry
	nil,                               // 170: datanode.CertInfoRes.ExtraEntry
	nil,                               // 171: datanode.CertFlowReq.ExtraEntry
	nil,                               // 172: datanode.CertFlowRes.ExtraEntry
	nil,                               // 173: datanode.AddUserLogReq.ExtraEntry
	nil,                               // 174: datanode.AddUserLogRes.ExtraEntry
	nil,                               // 175: datanode.QueryUserLogReq.ExtraEntry
	nil,                               // 176: datanode.QueryUserLogRes.ExtraEntry
	nil,                               // 177: datanode.UserLogCountReq.ExtraEntry
	nil,                               // 178: datanode.UserLogCountRes.ExtraEntry
	nil,                               // 179: datanode.AddTaskReq.ExtraEntry
	nil,                               // 180: datanode.AddTaskRes.ExtraEntry
	nil,                               // 181: datanode.GetTaskReq.ExtraEntry
	nil,                               // 182: datanode.GetTaskRes.ExtraEntry
	nil,                               // 183: datanode.GetTaskCountReq.ExtraEntry
	nil,                               // 184: datanode.GetTaskCountRes.ExtraEntry
	nil,                               // 185: datanode.UpdateUserinfoReq.ExtraEntry
	nil,                               // 186: datanode.UpdateUserinfoRes.ExtraEntry
	nil,                               // 187: datanode.AddPkgReq.ExtraEntry
	nil,                               // 188: datanode.AddPkgRes.ExtraEntry
	nil,                               // 189: datanode.DelPkgReq.ExtraEntry
	nil,                               // 190: datanode.DelPkgRes.ExtraEntry
	nil,                               // 191: datanode.PkgListReq.ExtraEntry
	nil,                               // 192: datanode.PkgListRes.ExtraEntry
	nil,                               // 193: datanode.PkgCountReq.ExtraEntry
	nil,                               // 194: datanode.PkgCountRes.ExtraEntry
	nil,                               // 195: datanode.VipLimitReq.ExtraEntry
	nil,                               // 196: datanode.VipLimitRes.ExtraEntry
	nil,                               // 197: datanode.VipProductReq.ExtraEntry
	nil,                               // 198: datanode.VipProductRes.ExtraEntry
	nil,                               // 199: datanode.VipPayReq.ExtraEntry
	nil,                               // 200: datanode.VipPayRes.ExtraEntry
	nil,                               // 201: datanode.VipOrderStatusReq.ExtraEntry
	nil,                               // 202: datanode.VipOrderStatusRes.ExtraEntry
	nil,                               // 203: datanode.VipOrderListReq.ExtraEntry
	nil,                               // 204: datanode.VipOrderListRes.ExtraEntry
	nil,                               // 205: datanode.UserScoreReq.ExtraEntry
	nil,                               // 206: datanode.UserScoreRes.ExtraEntry
	nil,                               // 207: datanode.UserVipReq.ExtraEntry
	nil,                               // 208: datanode.UserVipRes.ExtraEntry
	nil,                               // 209: datanode.VipDescReq.ExtraEntry
	nil,                               // 210: datanode.VipDescRes.ExtraEntry
	nil,                               // 211: datanode.FootLogReq.ExtraEntry
	nil,                               // 212: datanode.FootLogRes.ExtraEntry
	nil,                               // 213: datanode.AddShareReq.ExtraEntry
	nil,                               // 214: datanode.AddShareRes.ExtraEntry
	nil,                               // 215: datanode.QueryShareReq.ExtraEntry
	nil,                               // 216: datanode.QueryShareRes.ExtraEntry
	nil,                               // 217: datanode.AddMeGoodsCategoryReq.ExtraEntry
	nil,                               // 218: datanode.AddMeGoodsCategoryRes.ExtraEntry
	nil,                               // 219: datanode.GetMeGoodsCategoryReq.ExtraEntry
	nil,                               // 220: datanode.GetMeGoodsCategoryRes.ExtraEntry
	nil,                               // 221: datanode.UpdateMeGoodsReq.ExtraEntry
	nil,                               // 222: datanode.UpdateMeGoodsRes.ExtraEntry
	nil,                               // 223: datanode.QueryMeGoodsReq.ExtraEntry
	nil,                               // 224: datanode.QueryMeGoodsRes.ExtraEntry
	nil,                               // 225: datanode.UpdateTemplateReq.ExtraEntry
	nil,                               // 226: datanode.UpdateTemplateRes.ExtraEntry
	nil,                               // 227: datanode.QueryTemplateReq.ExtraEntry
	nil,                               // 228: datanode.QueryTemplateRes.ExtraEntry
	nil,                               // 229: datanode.TemplateCountReq.ExtraEntry
	nil,                               // 230: datanode.TemplateCountRes.ExtraEntry
	nil,                               // 231: datanode.ShareTitleReq.ExtraEntry
	nil,                               // 232: datanode.ShareTitleRes.ExtraEntry
	nil,                               // 233: datanode.ShareMediaReq.ExtraEntry
	nil,                               // 234: datanode.ShareMediaRes.ExtraEntry
	nil,                               // 235: datanode.ShareUidsReq.ExtraEntry
	nil,                               // 236: datanode.ShareUidsRes.ExtraEntry
	nil,                               // 237: datanode.DelShareReq.ExtraEntry
	nil,                               // 238: datanode.DelShareRes.ExtraEntry
	nil,                               // 239: datanode.DelTemplateReq.ExtraEntry
	nil,                               // 240: datanode.DelTemplateRes.ExtraEntry
	nil,                               // 241: datanode.AddFriendsReq.ExtraEntry
	nil,                               // 242: datanode.AddFriendsRes.ExtraEntry
	nil,                               // 243: datanode.FriendsCountReq.ExtraEntry
	nil,                               // 244: datanode.FriendsCountRes.ExtraEntry
	nil,                               // 245: datanode.GetFriendsReq.ExtraEntry
	nil,                               // 246: datanode.GetFriendsRes.ExtraEntry
	nil,                               // 247: datanode.AddLendLoanReq.ExtraEntry
	nil,                               // 248: datanode.AddLendLoanRes.ExtraEntry
	nil,                               // 249: datanode.CreateGatherReq.ExtraEntry
	nil,                               // 250: datanode.CreateGatherRes.ExtraEntry
	nil,                               // 251: datanode.LendLoanGatherReq.ExtraEntry
	nil,                               // 252: datanode.LendLoanGatherRes.ExtraEntry
	nil,                               // 253: datanode.LendLoanReq.ExtraEntry
	nil,                               // 254: datanode.LendLoanRes.ExtraEntry
	nil,                               // 255: datanode.GatherStatusReq.ExtraEntry
	nil,                               // 256: datanode.GatherStatusRes.ExtraEntry
	nil,                               // 257: datanode.LendLoanStatusReq.ExtraEntry
	nil,                               // 258: datanode.LendLoanStatusRes.ExtraEntry
	nil,                               // 259: datanode.LlendNameReq.ExtraEntry
	nil,                               // 260: datanode.LlendNameRes.ExtraEntry
	nil,                               // 261: datanode.LlendMediaReq.ExtraEntry
	nil,                               // 262: datanode.LlendMediaRes.ExtraEntry
	(rescode.Code)(0),                 // 263: rescode.Code
	(*common.UserInfo)(nil),           // 264: common.UserInfo
	(*common.WechatUserinfo)(nil),     // 265: common.WechatUserinfo
	(*common.AlipayUserinfo)(nil),     // 266: common.AlipayUserinfo
	(*common.BaiduEntity)(nil),        // 267: common.BaiduEntity
	(*common.PersonCert)(nil),         // 268: common.PersonCert
	(*common.UserLog)(nil),            // 269: common.UserLog
	(*common.CronItem)(nil),           // 270: common.CronItem
	(*common.UpdateUserinfoItem)(nil), // 271: common.UpdateUserinfoItem
	(*common.PkgItem)(nil),            // 272: common.PkgItem
	(*common.VipProduct)(nil),         // 273: common.VipProduct
	(*common.VipOrder)(nil),           // 274: common.VipOrder
	(*common.UserScore)(nil),          // 275: common.UserScore
	(*common.UserVip)(nil),            // 276: common.UserVip
	(*common.VipDesc)(nil),            // 277: common.VipDesc
	(*common.FootLog)(nil),            // 278: common.FootLog
	(*common.ShareItem)(nil),          // 279: common.ShareItem
	(*common.MeGoodsCategory)(nil),    // 280: common.MeGoodsCategory
	(*common.MeGoods)(nil),            // 281: common.MeGoods
	(*common.TemplateItem)(nil),       // 282: common.TemplateItem
	(*common.ShareImage)(nil),         // 283: common.ShareImage
	(*common.Authorize)(nil),          // 284: common.Authorize
	(*common.LendLoan)(nil),           // 285: common.LendLoan
	(*common.Gather)(nil),             // 286: common.Gather
	(*common.LendLoanGather)(nil),     // 287: common.LendLoanGather
	(common.LendLoan_Status)(0),       // 288: common.LendLoan_Status
}
var file_datanode_proto_depIdxs = []int32{
	139, // 0: datanode.UserInfoReq.extra:type_name -> datanode.UserInfoReq.ExtraEntry
	140, // 1: datanode.NewUserReq.extra:type_name -> datanode.NewUserReq.ExtraEntry
	141, // 2: datanode.SearchUserReq.extra:type_name -> datanode.SearchUserReq.ExtraEntry
	0,   // 3: datanode.SearchUserRes.users:type_name -> datanode.User
	142, // 4: datanode.SearchUserRes.extra:type_name -> datanode.SearchUserRes.ExtraEntry
	263, // 5: datanode.UserRes.rescode:type_name -> rescode.Code
	0,   // 6: datanode.UserRes.user:type_name -> datanode.User
	143, // 7: datanode.UserRes.extra:type_name -> datanode.UserRes.ExtraEntry
	144, // 8: datanode.FileDirReq.extra:type_name -> datanode.FileDirReq.ExtraEntry
	263, // 9: datanode.FileDirRes.rescode:type_name -> rescode.Code
	6,   // 10: datanode.FileDirRes.dirs:type_name -> datanode.FileItem
	263, // 11: datanode.AddDirRes.rescode:type_name -> rescode.Code
	263, // 12: datanode.AddFileRes.rescode:type_name -> rescode.Code
	145, // 13: datanode.FileAttrReq.extra:type_name -> datanode.FileAttrReq.ExtraEntry
	263, // 14: datanode.FileAttrRes.rescode:type_name -> rescode.Code
	146, // 15: datanode.ThumbnailReq.extra:type_name -> datanode.ThumbnailReq.ExtraEntry
	263, // 16: datanode.ThumbnailRes.rescode:type_name -> rescode.Code
	263, // 17: datanode.SetKeyvalueRes.rescode:type_name -> rescode.Code
	263, // 18: datanode.GetKeyvalueRes.rescode:type_name -> rescode.Code
	263, // 19: datanode.DelKeyvalueRes.rescode:type_name -> rescode.Code
	264, // 20: datanode.SetUserInfoReq.info:type_name -> common.UserInfo
	147, // 21: datanode.SetUserInfoReq.extra:type_name -> datanode.SetUserInfoReq.ExtraEntry
	263, // 22: datanode.SetUserInfoRes.rescode:type_name -> rescode.Code
	148, // 23: datanode.SetUserInfoRes.extra:type_name -> datanode.SetUserInfoRes.ExtraEntry
	149, // 24: datanode.GetUserInfoReq.extra:type_name -> datanode.GetUserInfoReq.ExtraEntry
	263, // 25: datanode.GetUserInfoRes.rescode:type_name -> rescode.Code
	264, // 26: datanode.GetUserInfoRes.info:type_name -> common.UserInfo
	150, // 27: datanode.GetUserInfoRes.extra:type_name -> datanode.GetUserInfoRes.ExtraEntry
	265, // 28: datanode.SetWechatUinfoReq.info:type_name -> common.WechatUserinfo
	151, // 29: datanode.SetWechatUinfoReq.extra:type_name -> datanode.SetWechatUinfoReq.ExtraEntry
	263, // 30: datanode.SetWechatUinfoRes.rescode:type_name -> rescode.Code
	152, // 31: datanode.SetWechatUinfoRes.extra:type_name -> datanode.SetWechatUinfoRes.ExtraEntry
	153, // 32: datanode.GetWechatUinfoReq.extra:type_name -> datanode.GetWechatUinfoReq.ExtraEntry
	263, // 33: datanode.GetWechatUinfoRes.rescode:type_name -> rescode.Code
	265, // 34: datanode.GetWechatUinfoRes.info:type_name -> common.WechatUserinfo
	154, // 35: datanode.GetWechatUinfoRes.extra:type_name -> datanode.GetWechatUinfoRes.ExtraEntry
	266, // 36: datanode.SetAlipayUinfoReq.info:type_name -> common.AlipayUserinfo
	155, // 37: datanode.SetAlipayUinfoReq.extra:type_name -> datanode.SetAlipayUinfoReq.ExtraEntry
	263, // 38: datanode.SetAlipayUinfoRes.rescode:type_name -> rescode.Code
	156, // 39: datanode.SetAlipayUinfoRes.extra:type_name -> datanode.SetAlipayUinfoRes.ExtraEntry
	157, // 40: datanode.GetAlipayUinfoReq.extra:type_name -> datanode.GetAlipayUinfoReq.ExtraEntry
	263, // 41: datanode.GetAlipayUinfoRes.rescode:type_name -> rescode.Code
	266, // 42: datanode.GetAlipayUinfoRes.info:type_name -> common.AlipayUserinfo
	158, // 43: datanode.GetAlipayUinfoRes.extra:type_name -> datanode.GetAlipayUinfoRes.ExtraEntry
	267, // 44: datanode.SetBaiduEntityReq.entitys:type_name -> common.BaiduEntity
	159, // 45: datanode.SetBaiduEntityReq.extra:type_name -> datanode.SetBaiduEntityReq.ExtraEntry
	263, // 46: datanode.SetBaiduEntityRes.rescode:type_name -> rescode.Code
	160, // 47: datanode.SetBaiduEntityRes.extra:type_name -> datanode.SetBaiduEntityRes.ExtraEntry
	161, // 48: datanode.BaiduEntityReq.extra:type_name -> datanode.BaiduEntityReq.ExtraEntry
	263, // 49: datanode.BaiduEntityRes.rescode:type_name -> rescode.Code
	267, // 50: datanode.BaiduEntityRes.entitys:type_name -> common.BaiduEntity
	162, // 51: datanode.BaiduEntityRes.extra:type_name -> datanode.BaiduEntityRes.ExtraEntry
	163, // 52: datanode.RefreshUserCoinReq.extra:type_name -> datanode.RefreshUserCoinReq.ExtraEntry
	263, // 53: datanode.RefreshUserCoinRes.rescode:type_name -> rescode.Code
	164, // 54: datanode.RefreshUserCoinRes.extra:type_name -> datanode.RefreshUserCoinRes.ExtraEntry
	268, // 55: datanode.SubmitCertReq.cert:type_name -> common.PersonCert
	165, // 56: datanode.SubmitCertReq.extra:type_name -> datanode.SubmitCertReq.ExtraEntry
	263, // 57: datanode.SubmitCertRes.rescode:type_name -> rescode.Code
	166, // 58: datanode.SubmitCertRes.extra:type_name -> datanode.SubmitCertRes.ExtraEntry
	167, // 59: datanode.CertStatusReq.extra:type_name -> datanode.CertStatusReq.ExtraEntry
	263, // 60: datanode.CertStatusRes.rescode:type_name -> rescode.Code
	268, // 61: datanode.CertStatusRes.cert:type_name -> common.PersonCert
	168, // 62: datanode.CertStatusRes.extra:type_name -> datanode.CertStatusRes.ExtraEntry
	169, // 63: datanode.CertInfoReq.extra:type_name -> datanode.CertInfoReq.ExtraEntry
	263, // 64: datanode.CertInfoRes.rescode:type_name -> rescode.Code
	268, // 65: datanode.CertInfoRes.cert:type_name -> common.PersonCert
	170, // 66: datanode.CertInfoRes.extra:type_name -> datanode.CertInfoRes.ExtraEntry
	171, // 67: datanode.CertFlowReq.extra:type_name -> datanode.CertFlowReq.ExtraEntry
	263, // 68: datanode.CertFlowRes.rescode:type_name -> rescode.Code
	268, // 69: datanode.CertFlowRes.cert:type_name -> common.PersonCert
	172, // 70: datanode.CertFlowRes.extra:type_name -> datanode.CertFlowRes.ExtraEntry
	173, // 71: datanode.AddUserLogReq.extra:type_name -> datanode.AddUserLogReq.ExtraEntry
	263, // 72: datanode.AddUserLogRes.rescode:type_name -> rescode.Code
	174, // 73: datanode.AddUserLogRes.extra:type_name -> datanode.AddUserLogRes.ExtraEntry
	175, // 74: datanode.QueryUserLogReq.extra:type_name -> datanode.QueryUserLogReq.ExtraEntry
	263, // 75: datanode.QueryUserLogRes.rescode:type_name -> rescode.Code
	269, // 76: datanode.QueryUserLogRes.logs:type_name -> common.UserLog
	176, // 77: datanode.QueryUserLogRes.extra:type_name -> datanode.QueryUserLogRes.ExtraEntry
	177, // 78: datanode.UserLogCountReq.extra:type_name -> datanode.UserLogCountReq.ExtraEntry
	263, // 79: datanode.UserLogCountRes.rescode:type_name -> rescode.Code
	178, // 80: datanode.UserLogCountRes.extra:type_name -> datanode.UserLogCountRes.ExtraEntry
	270, // 81: datanode.AddTaskReq.cron:type_name -> common.CronItem
	179, // 82: datanode.AddTaskReq.extra:type_name -> datanode.AddTaskReq.ExtraEntry
	263, // 83: datanode.AddTaskRes.rescode:type_name -> rescode.Code
	180, // 84: datanode.AddTaskRes.extra:type_name -> datanode.AddTaskRes.ExtraEntry
	181, // 85: datanode.GetTaskReq.extra:type_name -> datanode.GetTaskReq.ExtraEntry
	263, // 86: datanode.GetTaskRes.rescode:type_name -> rescode.Code
	270, // 87: datanode.GetTaskRes.crons:type_name -> common.CronItem
	182, // 88: datanode.GetTaskRes.extra:type_name -> datanode.GetTaskRes.ExtraEntry
	183, // 89: datanode.GetTaskCountReq.extra:type_name -> datanode.GetTaskCountReq.ExtraEntry
	263, // 90: datanode.GetTaskCountRes.rescode:type_name -> rescode.Code
	184, // 91: datanode.GetTaskCountRes.extra:type_name -> datanode.GetTaskCountRes.ExtraEntry
	271, // 92: datanode.UpdateUserinfoReq.info:type_name -> common.UpdateUserinfoItem
	185, // 93: datanode.UpdateUserinfoReq.extra:type_name -> datanode.UpdateUserinfoReq.ExtraEntry
	263, // 94: datanode.UpdateUserinfoRes.rescode:type_name -> rescode.Code
	186, // 95: datanode.UpdateUserinfoRes.extra:type_name -> datanode.UpdateUserinfoRes.ExtraEntry
	187, // 96: datanode.AddPkgReq.extra:type_name -> datanode.AddPkgReq.ExtraEntry
	263, // 97: datanode.AddPkgRes.rescode:type_name -> rescode.Code
	188, // 98: datanode.AddPkgRes.extra:type_name -> datanode.AddPkgRes.ExtraEntry
	189, // 99: datanode.DelPkgReq.extra:type_name -> datanode.DelPkgReq.ExtraEntry
	263, // 100: datanode.DelPkgRes.rescode:type_name -> rescode.Code
	190, // 101: datanode.DelPkgRes.extra:type_name -> datanode.DelPkgRes.ExtraEntry
	191, // 102: datanode.PkgListReq.extra:type_name -> datanode.PkgListReq.ExtraEntry
	263, // 103: datanode.PkgListRes.rescode:type_name -> rescode.Code
	272, // 104: datanode.PkgListRes.version:type_name -> common.PkgItem
	192, // 105: datanode.PkgListRes.extra:type_name -> datanode.PkgListRes.ExtraEntry
	193, // 106: datanode.PkgCountReq.extra:type_name -> datanode.PkgCountReq.ExtraEntry
	263, // 107: datanode.PkgCountRes.rescode:type_name -> rescode.Code
	194, // 108: datanode.PkgCountRes.extra:type_name -> datanode.PkgCountRes.ExtraEntry
	195, // 109: datanode.VipLimitReq.extra:type_name -> datanode.VipLimitReq.ExtraEntry
	263, // 110: datanode.VipLimitRes.rescode:type_name -> rescode.Code
	196, // 111: datanode.VipLimitRes.extra:type_name -> datanode.VipLimitRes.ExtraEntry
	273, // 112: datanode.VipProductReq.products:type_name -> common.VipProduct
	197, // 113: datanode.VipProductReq.extra:type_name -> datanode.VipProductReq.ExtraEntry
	263, // 114: datanode.VipProductRes.rescode:type_name -> rescode.Code
	273, // 115: datanode.VipProductRes.products:type_name -> common.VipProduct
	198, // 116: datanode.VipProductRes.extra:type_name -> datanode.VipProductRes.ExtraEntry
	274, // 117: datanode.VipPayReq.order:type_name -> common.VipOrder
	199, // 118: datanode.VipPayReq.extra:type_name -> datanode.VipPayReq.ExtraEntry
	263, // 119: datanode.VipPayRes.rescode:type_name -> rescode.Code
	274, // 120: datanode.VipPayRes.order:type_name -> common.VipOrder
	200, // 121: datanode.VipPayRes.extra:type_name -> datanode.VipPayRes.ExtraEntry
	274, // 122: datanode.VipOrderStatusReq.order:type_name -> common.VipOrder
	201, // 123: datanode.VipOrderStatusReq.extra:type_name -> datanode.VipOrderStatusReq.ExtraEntry
	263, // 124: datanode.VipOrderStatusRes.rescode:type_name -> rescode.Code
	274, // 125: datanode.VipOrderStatusRes.order:type_name -> common.VipOrder
	202, // 126: datanode.VipOrderStatusRes.extra:type_name -> datanode.VipOrderStatusRes.ExtraEntry
	274, // 127: datanode.VipOrderListReq.order:type_name -> common.VipOrder
	203, // 128: datanode.VipOrderListReq.extra:type_name -> datanode.VipOrderListReq.ExtraEntry
	263, // 129: datanode.VipOrderListRes.rescode:type_name -> rescode.Code
	274, // 130: datanode.VipOrderListRes.order:type_name -> common.VipOrder
	204, // 131: datanode.VipOrderListRes.extra:type_name -> datanode.VipOrderListRes.ExtraEntry
	275, // 132: datanode.UserScoreReq.score:type_name -> common.UserScore
	205, // 133: datanode.UserScoreReq.extra:type_name -> datanode.UserScoreReq.ExtraEntry
	263, // 134: datanode.UserScoreRes.rescode:type_name -> rescode.Code
	275, // 135: datanode.UserScoreRes.score:type_name -> common.UserScore
	206, // 136: datanode.UserScoreRes.extra:type_name -> datanode.UserScoreRes.ExtraEntry
	276, // 137: datanode.UserVipReq.vip:type_name -> common.UserVip
	207, // 138: datanode.UserVipReq.extra:type_name -> datanode.UserVipReq.ExtraEntry
	263, // 139: datanode.UserVipRes.rescode:type_name -> rescode.Code
	276, // 140: datanode.UserVipRes.vip:type_name -> common.UserVip
	208, // 141: datanode.UserVipRes.extra:type_name -> datanode.UserVipRes.ExtraEntry
	277, // 142: datanode.VipDescReq.desc:type_name -> common.VipDesc
	209, // 143: datanode.VipDescReq.extra:type_name -> datanode.VipDescReq.ExtraEntry
	263, // 144: datanode.VipDescRes.rescode:type_name -> rescode.Code
	277, // 145: datanode.VipDescRes.desc:type_name -> common.VipDesc
	210, // 146: datanode.VipDescRes.extra:type_name -> datanode.VipDescRes.ExtraEntry
	278, // 147: datanode.FootLogReq.foot_log:type_name -> common.FootLog
	211, // 148: datanode.FootLogReq.extra:type_name -> datanode.FootLogReq.ExtraEntry
	263, // 149: datanode.FootLogRes.rescode:type_name -> rescode.Code
	278, // 150: datanode.FootLogRes.desc:type_name -> common.FootLog
	212, // 151: datanode.FootLogRes.extra:type_name -> datanode.FootLogRes.ExtraEntry
	279, // 152: datanode.AddShareReq.share:type_name -> common.ShareItem
	213, // 153: datanode.AddShareReq.extra:type_name -> datanode.AddShareReq.ExtraEntry
	263, // 154: datanode.AddShareRes.rescode:type_name -> rescode.Code
	214, // 155: datanode.AddShareRes.extra:type_name -> datanode.AddShareRes.ExtraEntry
	215, // 156: datanode.QueryShareReq.extra:type_name -> datanode.QueryShareReq.ExtraEntry
	263, // 157: datanode.QueryShareRes.rescode:type_name -> rescode.Code
	279, // 158: datanode.QueryShareRes.shares:type_name -> common.ShareItem
	216, // 159: datanode.QueryShareRes.extra:type_name -> datanode.QueryShareRes.ExtraEntry
	280, // 160: datanode.AddMeGoodsCategoryReq.category:type_name -> common.MeGoodsCategory
	217, // 161: datanode.AddMeGoodsCategoryReq.extra:type_name -> datanode.AddMeGoodsCategoryReq.ExtraEntry
	263, // 162: datanode.AddMeGoodsCategoryRes.rescode:type_name -> rescode.Code
	218, // 163: datanode.AddMeGoodsCategoryRes.extra:type_name -> datanode.AddMeGoodsCategoryRes.ExtraEntry
	219, // 164: datanode.GetMeGoodsCategoryReq.extra:type_name -> datanode.GetMeGoodsCategoryReq.ExtraEntry
	263, // 165: datanode.GetMeGoodsCategoryRes.rescode:type_name -> rescode.Code
	280, // 166: datanode.GetMeGoodsCategoryRes.categorys:type_name -> common.MeGoodsCategory
	220, // 167: datanode.GetMeGoodsCategoryRes.extra:type_name -> datanode.GetMeGoodsCategoryRes.ExtraEntry
	281, // 168: datanode.UpdateMeGoodsReq.goods:type_name -> common.MeGoods
	221, // 169: datanode.UpdateMeGoodsReq.extra:type_name -> datanode.UpdateMeGoodsReq.ExtraEntry
	263, // 170: datanode.UpdateMeGoodsRes.rescode:type_name -> rescode.Code
	222, // 171: datanode.UpdateMeGoodsRes.extra:type_name -> datanode.UpdateMeGoodsRes.ExtraEntry
	223, // 172: datanode.QueryMeGoodsReq.extra:type_name -> datanode.QueryMeGoodsReq.ExtraEntry
	263, // 173: datanode.QueryMeGoodsRes.rescode:type_name -> rescode.Code
	281, // 174: datanode.QueryMeGoodsRes.goods:type_name -> common.MeGoods
	224, // 175: datanode.QueryMeGoodsRes.extra:type_name -> datanode.QueryMeGoodsRes.ExtraEntry
	282, // 176: datanode.UpdateTemplateReq.template:type_name -> common.TemplateItem
	225, // 177: datanode.UpdateTemplateReq.extra:type_name -> datanode.UpdateTemplateReq.ExtraEntry
	263, // 178: datanode.UpdateTemplateRes.rescode:type_name -> rescode.Code
	226, // 179: datanode.UpdateTemplateRes.extra:type_name -> datanode.UpdateTemplateRes.ExtraEntry
	282, // 180: datanode.QueryTemplateReq.template:type_name -> common.TemplateItem
	227, // 181: datanode.QueryTemplateReq.extra:type_name -> datanode.QueryTemplateReq.ExtraEntry
	263, // 182: datanode.QueryTemplateRes.rescode:type_name -> rescode.Code
	282, // 183: datanode.QueryTemplateRes.templates:type_name -> common.TemplateItem
	228, // 184: datanode.QueryTemplateRes.extra:type_name -> datanode.QueryTemplateRes.ExtraEntry
	282, // 185: datanode.TemplateCountReq.template:type_name -> common.TemplateItem
	229, // 186: datanode.TemplateCountReq.extra:type_name -> datanode.TemplateCountReq.ExtraEntry
	263, // 187: datanode.TemplateCountRes.rescode:type_name -> rescode.Code
	230, // 188: datanode.TemplateCountRes.extra:type_name -> datanode.TemplateCountRes.ExtraEntry
	231, // 189: datanode.ShareTitleReq.extra:type_name -> datanode.ShareTitleReq.ExtraEntry
	263, // 190: datanode.ShareTitleRes.rescode:type_name -> rescode.Code
	232, // 191: datanode.ShareTitleRes.extra:type_name -> datanode.ShareTitleRes.ExtraEntry
	283, // 192: datanode.ShareMediaReq.media:type_name -> common.ShareImage
	233, // 193: datanode.ShareMediaReq.extra:type_name -> datanode.ShareMediaReq.ExtraEntry
	263, // 194: datanode.ShareMediaRes.rescode:type_name -> rescode.Code
	234, // 195: datanode.ShareMediaRes.extra:type_name -> datanode.ShareMediaRes.ExtraEntry
	235, // 196: datanode.ShareUidsReq.extra:type_name -> datanode.ShareUidsReq.ExtraEntry
	263, // 197: datanode.ShareUidsRes.rescode:type_name -> rescode.Code
	236, // 198: datanode.ShareUidsRes.extra:type_name -> datanode.ShareUidsRes.ExtraEntry
	237, // 199: datanode.DelShareReq.extra:type_name -> datanode.DelShareReq.ExtraEntry
	263, // 200: datanode.DelShareRes.rescode:type_name -> rescode.Code
	238, // 201: datanode.DelShareRes.extra:type_name -> datanode.DelShareRes.ExtraEntry
	239, // 202: datanode.DelTemplateReq.extra:type_name -> datanode.DelTemplateReq.ExtraEntry
	263, // 203: datanode.DelTemplateRes.rescode:type_name -> rescode.Code
	240, // 204: datanode.DelTemplateRes.extra:type_name -> datanode.DelTemplateRes.ExtraEntry
	241, // 205: datanode.AddFriendsReq.extra:type_name -> datanode.AddFriendsReq.ExtraEntry
	263, // 206: datanode.AddFriendsRes.rescode:type_name -> rescode.Code
	242, // 207: datanode.AddFriendsRes.extra:type_name -> datanode.AddFriendsRes.ExtraEntry
	243, // 208: datanode.FriendsCountReq.extra:type_name -> datanode.FriendsCountReq.ExtraEntry
	263, // 209: datanode.FriendsCountRes.rescode:type_name -> rescode.Code
	244, // 210: datanode.FriendsCountRes.extra:type_name -> datanode.FriendsCountRes.ExtraEntry
	245, // 211: datanode.GetFriendsReq.extra:type_name -> datanode.GetFriendsReq.ExtraEntry
	263, // 212: datanode.GetFriendsRes.rescode:type_name -> rescode.Code
	264, // 213: datanode.GetFriendsRes.friends:type_name -> common.UserInfo
	246, // 214: datanode.GetFriendsRes.extra:type_name -> datanode.GetFriendsRes.ExtraEntry
	284, // 215: datanode.AddLendLoanReq.auth:type_name -> common.Authorize
	285, // 216: datanode.AddLendLoanReq.lendloan:type_name -> common.LendLoan
	247, // 217: datanode.AddLendLoanReq.extra:type_name -> datanode.AddLendLoanReq.ExtraEntry
	263, // 218: datanode.AddLendLoanRes.rescode:type_name -> rescode.Code
	248, // 219: datanode.AddLendLoanRes.extra:type_name -> datanode.AddLendLoanRes.ExtraEntry
	284, // 220: datanode.CreateGatherReq.auth:type_name -> common.Authorize
	249, // 221: datanode.CreateGatherReq.extra:type_name -> datanode.CreateGatherReq.ExtraEntry
	263, // 222: datanode.CreateGatherRes.rescode:type_name -> rescode.Code
	250, // 223: datanode.CreateGatherRes.extra:type_name -> datanode.CreateGatherRes.ExtraEntry
	284, // 224: datanode.LendLoanGatherReq.auth:type_name -> common.Authorize
	251, // 225: datanode.LendLoanGatherReq.extra:type_name -> datanode.LendLoanGatherReq.ExtraEntry
	263, // 226: datanode.LendLoanGatherRes.rescode:type_name -> rescode.Code
	286, // 227: datanode.LendLoanGatherRes.gathers:type_name -> common.Gather
	252, // 228: datanode.LendLoanGatherRes.extra:type_name -> datanode.LendLoanGatherRes.ExtraEntry
	284, // 229: datanode.LendLoanReq.auth:type_name -> common.Authorize
	253, // 230: datanode.LendLoanReq.extra:type_name -> datanode.LendLoanReq.ExtraEntry
	263, // 231: datanode.LendLoanRes.rescode:type_name -> rescode.Code
	287, // 232: datanode.LendLoanRes.gather:type_name -> common.LendLoanGather
	285, // 233: datanode.LendLoanRes.lendloans:type_name -> common.LendLoan
	254, // 234: datanode.LendLoanRes.extra:type_name -> datanode.LendLoanRes.ExtraEntry
	284, // 235: datanode.GatherStatusReq.auth:type_name -> common.Authorize
	288, // 236: datanode.GatherStatusReq.status:type_name -> common.LendLoan_Status
	255, // 237: datanode.GatherStatusReq.extra:type_name -> datanode.GatherStatusReq.ExtraEntry
	263, // 238: datanode.GatherStatusRes.rescode:type_name -> rescode.Code
	256, // 239: datanode.GatherStatusRes.extra:type_name -> datanode.GatherStatusRes.ExtraEntry
	284, // 240: datanode.LendLoanStatusReq.auth:type_name -> common.Authorize
	288, // 241: datanode.LendLoanStatusReq.status:type_name -> common.LendLoan_Status
	257, // 242: datanode.LendLoanStatusReq.extra:type_name -> datanode.LendLoanStatusReq.ExtraEntry
	263, // 243: datanode.LendLoanStatusRes.rescode:type_name -> rescode.Code
	258, // 244: datanode.LendLoanStatusRes.extra:type_name -> datanode.LendLoanStatusRes.ExtraEntry
	259, // 245: datanode.LlendNameReq.extra:type_name -> datanode.LlendNameReq.ExtraEntry
	263, // 246: datanode.LlendNameRes.rescode:type_name -> rescode.Code
	260, // 247: datanode.LlendNameRes.extra:type_name -> datanode.LlendNameRes.ExtraEntry
	283, // 248: datanode.LlendMediaReq.media:type_name -> common.ShareImage
	261, // 249: datanode.LlendMediaReq.extra:type_name -> datanode.LlendMediaReq.ExtraEntry
	263, // 250: datanode.LlendMediaRes.rescode:type_name -> rescode.Code
	262, // 251: datanode.LlendMediaRes.extra:type_name -> datanode.LlendMediaRes.ExtraEntry
	2,   // 252: datanode.DatanodeService.CreateUser:input_type -> datanode.NewUserReq
	1,   // 253: datanode.DatanodeService.UserInfo:input_type -> datanode.UserInfoReq
	3,   // 254: datanode.DatanodeService.SearchUser:input_type -> datanode.SearchUserReq
	61,  // 255: datanode.DatanodeService.UpdateUserInfo:input_type -> datanode.UpdateUserinfoReq
	7,   // 256: datanode.DatanodeService.FileDirOne:input_type -> datanode.FileDirReq
	9,   // 257: datanode.DatanodeService.FileDirAdd:input_type -> datanode.AddDirReq
	11,  // 258: datanode.DatanodeService.AddFile:input_type -> datanode.AddFileReq
	13,  // 259: datanode.DatanodeService.YunSaveAttr:input_type -> datanode.FileAttrReq
	15,  // 260: datanode.DatanodeService.Thumbnail:input_type -> datanode.ThumbnailReq
	17,  // 261: datanode.DatanodeService.SetKeyValue:input_type -> datanode.SetKeyvalueReq
	19,  // 262: datanode.DatanodeService.GetKeyValue:input_type -> datanode.GetKeyvalueReq
	21,  // 263: datanode.DatanodeService.DelKeyValue:input_type -> datanode.DelKeyvalueReq
	23,  // 264: datanode.DatanodeService.SetUserInfo:input_type -> datanode.SetUserInfoReq
	25,  // 265: datanode.DatanodeService.GetUserInfo:input_type -> datanode.GetUserInfoReq
	27,  // 266: datanode.DatanodeService.SetWechatUinfo:input_type -> datanode.SetWechatUinfoReq
	29,  // 267: datanode.DatanodeService.GetWechatUinfo:input_type -> datanode.GetWechatUinfoReq
	31,  // 268: datanode.DatanodeService.SetAlipayUinfo:input_type -> datanode.SetAlipayUinfoReq
	33,  // 269: datanode.DatanodeService.GetAlipayUinfo:input_type -> datanode.GetAlipayUinfoReq
	35,  // 270: datanode.DatanodeService.SetBaiduEntity:input_type -> datanode.SetBaiduEntityReq
	37,  // 271: datanode.DatanodeService.BaiduEntity:input_type -> datanode.BaiduEntityReq
	41,  // 272: datanode.DatanodeService.SubmitCert:input_type -> datanode.SubmitCertReq
	43,  // 273: datanode.DatanodeService.CertStatus:input_type -> datanode.CertStatusReq
	45,  // 274: datanode.DatanodeService.CertInfo:input_type -> datanode.CertInfoReq
	47,  // 275: datanode.DatanodeService.CertFlow:input_type -> datanode.CertFlowReq
	49,  // 276: datanode.DatanodeService.AddUserLog:input_type -> datanode.AddUserLogReq
	51,  // 277: datanode.DatanodeService.QueryUserLog:input_type -> datanode.QueryUserLogReq
	53,  // 278: datanode.DatanodeService.UserLogCount:input_type -> datanode.UserLogCountReq
	55,  // 279: datanode.DatanodeService.AddTask:input_type -> datanode.AddTaskReq
	57,  // 280: datanode.DatanodeService.GetTask:input_type -> datanode.GetTaskReq
	59,  // 281: datanode.DatanodeService.GetTaskCount:input_type -> datanode.GetTaskCountReq
	63,  // 282: datanode.DatanodeService.AddPkg:input_type -> datanode.AddPkgReq
	65,  // 283: datanode.DatanodeService.DelPkg:input_type -> datanode.DelPkgReq
	67,  // 284: datanode.DatanodeService.PkgLists:input_type -> datanode.PkgListReq
	69,  // 285: datanode.DatanodeService.PkgCount:input_type -> datanode.PkgCountReq
	71,  // 286: datanode.DatanodeService.VipLimit:input_type -> datanode.VipLimitReq
	73,  // 287: datanode.DatanodeService.VipProduct:input_type -> datanode.VipProductReq
	85,  // 288: datanode.DatanodeService.VipDesc:input_type -> datanode.VipDescReq
	75,  // 289: datanode.DatanodeService.VipPay:input_type -> datanode.VipPayReq
	77,  // 290: datanode.DatanodeService.VipOrderStatus:input_type -> datanode.VipOrderStatusReq
	79,  // 291: datanode.DatanodeService.VipOrderList:input_type -> datanode.VipOrderListReq
	81,  // 292: datanode.DatanodeService.UserScore:input_type -> datanode.UserScoreReq
	83,  // 293: datanode.DatanodeService.UserVip:input_type -> datanode.UserVipReq
	39,  // 294: datanode.DatanodeService.RefreshUserCoin:input_type -> datanode.RefreshUserCoinReq
	87,  // 295: datanode.DatanodeService.FootLog:input_type -> datanode.FootLogReq
	89,  // 296: datanode.DatanodeService.AddShare:input_type -> datanode.AddShareReq
	91,  // 297: datanode.DatanodeService.QueryShare:input_type -> datanode.QueryShareReq
	93,  // 298: datanode.DatanodeService.AddMeGoodsCategory:input_type -> datanode.AddMeGoodsCategoryReq
	95,  // 299: datanode.DatanodeService.GetMeGoodsCategory:input_type -> datanode.GetMeGoodsCategoryReq
	97,  // 300: datanode.DatanodeService.UpdateMeGoods:input_type -> datanode.UpdateMeGoodsReq
	99,  // 301: datanode.DatanodeService.QueryMeGoods:input_type -> datanode.QueryMeGoodsReq
	101, // 302: datanode.DatanodeService.UpdateTemplate:input_type -> datanode.UpdateTemplateReq
	103, // 303: datanode.DatanodeService.QueryTemplate:input_type -> datanode.QueryTemplateReq
	105, // 304: datanode.DatanodeService.TemplateCount:input_type -> datanode.TemplateCountReq
	107, // 305: datanode.DatanodeService.ShareTitle:input_type -> datanode.ShareTitleReq
	109, // 306: datanode.DatanodeService.ShareMedia:input_type -> datanode.ShareMediaReq
	111, // 307: datanode.DatanodeService.ShareUids:input_type -> datanode.ShareUidsReq
	113, // 308: datanode.DatanodeService.DelShare:input_type -> datanode.DelShareReq
	115, // 309: datanode.DatanodeService.DelTemplate:input_type -> datanode.DelTemplateReq
	117, // 310: datanode.DatanodeService.AddFriends:input_type -> datanode.AddFriendsReq
	119, // 311: datanode.DatanodeService.FriendsCount:input_type -> datanode.FriendsCountReq
	121, // 312: datanode.DatanodeService.GetFriends:input_type -> datanode.GetFriendsReq
	123, // 313: datanode.DatanodeService.AddLendLoan:input_type -> datanode.AddLendLoanReq
	125, // 314: datanode.DatanodeService.CreateGather:input_type -> datanode.CreateGatherReq
	127, // 315: datanode.DatanodeService.LendLoanGather:input_type -> datanode.LendLoanGatherReq
	129, // 316: datanode.DatanodeService.LendLoan:input_type -> datanode.LendLoanReq
	131, // 317: datanode.DatanodeService.GatherStatus:input_type -> datanode.GatherStatusReq
	133, // 318: datanode.DatanodeService.LendLoanStatus:input_type -> datanode.LendLoanStatusReq
	135, // 319: datanode.DatanodeService.LlendName:input_type -> datanode.LlendNameReq
	137, // 320: datanode.DatanodeService.LlendMedia:input_type -> datanode.LlendMediaReq
	5,   // 321: datanode.DatanodeService.CreateUser:output_type -> datanode.UserRes
	5,   // 322: datanode.DatanodeService.UserInfo:output_type -> datanode.UserRes
	4,   // 323: datanode.DatanodeService.SearchUser:output_type -> datanode.SearchUserRes
	62,  // 324: datanode.DatanodeService.UpdateUserInfo:output_type -> datanode.UpdateUserinfoRes
	8,   // 325: datanode.DatanodeService.FileDirOne:output_type -> datanode.FileDirRes
	10,  // 326: datanode.DatanodeService.FileDirAdd:output_type -> datanode.AddDirRes
	12,  // 327: datanode.DatanodeService.AddFile:output_type -> datanode.AddFileRes
	14,  // 328: datanode.DatanodeService.YunSaveAttr:output_type -> datanode.FileAttrRes
	16,  // 329: datanode.DatanodeService.Thumbnail:output_type -> datanode.ThumbnailRes
	18,  // 330: datanode.DatanodeService.SetKeyValue:output_type -> datanode.SetKeyvalueRes
	20,  // 331: datanode.DatanodeService.GetKeyValue:output_type -> datanode.GetKeyvalueRes
	22,  // 332: datanode.DatanodeService.DelKeyValue:output_type -> datanode.DelKeyvalueRes
	24,  // 333: datanode.DatanodeService.SetUserInfo:output_type -> datanode.SetUserInfoRes
	26,  // 334: datanode.DatanodeService.GetUserInfo:output_type -> datanode.GetUserInfoRes
	28,  // 335: datanode.DatanodeService.SetWechatUinfo:output_type -> datanode.SetWechatUinfoRes
	30,  // 336: datanode.DatanodeService.GetWechatUinfo:output_type -> datanode.GetWechatUinfoRes
	32,  // 337: datanode.DatanodeService.SetAlipayUinfo:output_type -> datanode.SetAlipayUinfoRes
	34,  // 338: datanode.DatanodeService.GetAlipayUinfo:output_type -> datanode.GetAlipayUinfoRes
	36,  // 339: datanode.DatanodeService.SetBaiduEntity:output_type -> datanode.SetBaiduEntityRes
	38,  // 340: datanode.DatanodeService.BaiduEntity:output_type -> datanode.BaiduEntityRes
	42,  // 341: datanode.DatanodeService.SubmitCert:output_type -> datanode.SubmitCertRes
	44,  // 342: datanode.DatanodeService.CertStatus:output_type -> datanode.CertStatusRes
	46,  // 343: datanode.DatanodeService.CertInfo:output_type -> datanode.CertInfoRes
	48,  // 344: datanode.DatanodeService.CertFlow:output_type -> datanode.CertFlowRes
	50,  // 345: datanode.DatanodeService.AddUserLog:output_type -> datanode.AddUserLogRes
	52,  // 346: datanode.DatanodeService.QueryUserLog:output_type -> datanode.QueryUserLogRes
	54,  // 347: datanode.DatanodeService.UserLogCount:output_type -> datanode.UserLogCountRes
	56,  // 348: datanode.DatanodeService.AddTask:output_type -> datanode.AddTaskRes
	58,  // 349: datanode.DatanodeService.GetTask:output_type -> datanode.GetTaskRes
	60,  // 350: datanode.DatanodeService.GetTaskCount:output_type -> datanode.GetTaskCountRes
	64,  // 351: datanode.DatanodeService.AddPkg:output_type -> datanode.AddPkgRes
	66,  // 352: datanode.DatanodeService.DelPkg:output_type -> datanode.DelPkgRes
	68,  // 353: datanode.DatanodeService.PkgLists:output_type -> datanode.PkgListRes
	70,  // 354: datanode.DatanodeService.PkgCount:output_type -> datanode.PkgCountRes
	72,  // 355: datanode.DatanodeService.VipLimit:output_type -> datanode.VipLimitRes
	74,  // 356: datanode.DatanodeService.VipProduct:output_type -> datanode.VipProductRes
	86,  // 357: datanode.DatanodeService.VipDesc:output_type -> datanode.VipDescRes
	76,  // 358: datanode.DatanodeService.VipPay:output_type -> datanode.VipPayRes
	78,  // 359: datanode.DatanodeService.VipOrderStatus:output_type -> datanode.VipOrderStatusRes
	80,  // 360: datanode.DatanodeService.VipOrderList:output_type -> datanode.VipOrderListRes
	82,  // 361: datanode.DatanodeService.UserScore:output_type -> datanode.UserScoreRes
	84,  // 362: datanode.DatanodeService.UserVip:output_type -> datanode.UserVipRes
	40,  // 363: datanode.DatanodeService.RefreshUserCoin:output_type -> datanode.RefreshUserCoinRes
	88,  // 364: datanode.DatanodeService.FootLog:output_type -> datanode.FootLogRes
	90,  // 365: datanode.DatanodeService.AddShare:output_type -> datanode.AddShareRes
	92,  // 366: datanode.DatanodeService.QueryShare:output_type -> datanode.QueryShareRes
	94,  // 367: datanode.DatanodeService.AddMeGoodsCategory:output_type -> datanode.AddMeGoodsCategoryRes
	96,  // 368: datanode.DatanodeService.GetMeGoodsCategory:output_type -> datanode.GetMeGoodsCategoryRes
	98,  // 369: datanode.DatanodeService.UpdateMeGoods:output_type -> datanode.UpdateMeGoodsRes
	100, // 370: datanode.DatanodeService.QueryMeGoods:output_type -> datanode.QueryMeGoodsRes
	102, // 371: datanode.DatanodeService.UpdateTemplate:output_type -> datanode.UpdateTemplateRes
	104, // 372: datanode.DatanodeService.QueryTemplate:output_type -> datanode.QueryTemplateRes
	106, // 373: datanode.DatanodeService.TemplateCount:output_type -> datanode.TemplateCountRes
	108, // 374: datanode.DatanodeService.ShareTitle:output_type -> datanode.ShareTitleRes
	110, // 375: datanode.DatanodeService.ShareMedia:output_type -> datanode.ShareMediaRes
	112, // 376: datanode.DatanodeService.ShareUids:output_type -> datanode.ShareUidsRes
	114, // 377: datanode.DatanodeService.DelShare:output_type -> datanode.DelShareRes
	116, // 378: datanode.DatanodeService.DelTemplate:output_type -> datanode.DelTemplateRes
	118, // 379: datanode.DatanodeService.AddFriends:output_type -> datanode.AddFriendsRes
	120, // 380: datanode.DatanodeService.FriendsCount:output_type -> datanode.FriendsCountRes
	122, // 381: datanode.DatanodeService.GetFriends:output_type -> datanode.GetFriendsRes
	124, // 382: datanode.DatanodeService.AddLendLoan:output_type -> datanode.AddLendLoanRes
	126, // 383: datanode.DatanodeService.CreateGather:output_type -> datanode.CreateGatherRes
	128, // 384: datanode.DatanodeService.LendLoanGather:output_type -> datanode.LendLoanGatherRes
	130, // 385: datanode.DatanodeService.LendLoan:output_type -> datanode.LendLoanRes
	132, // 386: datanode.DatanodeService.GatherStatus:output_type -> datanode.GatherStatusRes
	134, // 387: datanode.DatanodeService.LendLoanStatus:output_type -> datanode.LendLoanStatusRes
	136, // 388: datanode.DatanodeService.LlendName:output_type -> datanode.LlendNameRes
	138, // 389: datanode.DatanodeService.LlendMedia:output_type -> datanode.LlendMediaRes
	321, // [321:390] is the sub-list for method output_type
	252, // [252:321] is the sub-list for method input_type
	252, // [252:252] is the sub-list for extension type_name
	252, // [252:252] is the sub-list for extension extendee
	0,   // [0:252] is the sub-list for field type_name
}

func init() { file_datanode_proto_init() }
func file_datanode_proto_init() {
	if File_datanode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datanode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDirReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDirRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDirReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDirRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAttrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAttrRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeyvalueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeyvalueRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyvalueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyvalueRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelKeyvalueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelKeyvalueRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWechatUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWechatUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWechatUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWechatUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAlipayUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAlipayUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlipayUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlipayUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaiduEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaiduEntityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduEntityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshUserCoinRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCertReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCertRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserLogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserLogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPkgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPkgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPkgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPkgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLimitRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVipRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipDescReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipDescRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShareRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryShareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryShareRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMeGoodsCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMeGoodsCategoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeGoodsCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeGoodsCategoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeGoodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeGoodsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMeGoodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMeGoodsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareTitleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareTitleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareMediaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareMediaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareUidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareUidsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelShareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelShareRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendsCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendsCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLendLoanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLendLoanRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGatherReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGatherRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LendLoanGatherReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LendLoanGatherRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LendLoanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LendLoanRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LendLoanStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LendLoanStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LlendNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LlendNameRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LlendMediaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LlendMediaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datanode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   263,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datanode_proto_goTypes,
		DependencyIndexes: file_datanode_proto_depIdxs,
		MessageInfos:      file_datanode_proto_msgTypes,
	}.Build()
	File_datanode_proto = out.File
	file_datanode_proto_rawDesc = nil
	file_datanode_proto_goTypes = nil
	file_datanode_proto_depIdxs = nil
}
