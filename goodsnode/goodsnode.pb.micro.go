// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: goodsnode.proto

package goodsnode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GoodsnodeService service

func NewGoodsnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GoodsnodeService service

type GoodsnodeService interface {
	// 我的物品
	AddMeGoodsCategory(ctx context.Context, in *AddMeGoodsCategoryReq, opts ...client.CallOption) (*AddMeGoodsCategoryRes, error)
	GetMeGoodsCategory(ctx context.Context, in *GetMeGoodsCategoryReq, opts ...client.CallOption) (*GetMeGoodsCategoryRes, error)
	AddMeGoods(ctx context.Context, in *AddMeGoodsReq, opts ...client.CallOption) (*AddMeGoodsRes, error)
	UpdateMeGoods(ctx context.Context, in *UpdateMeGoodsReq, opts ...client.CallOption) (*UpdateMeGoodsRes, error)
	QueryMeGoods(ctx context.Context, in *QueryMeGoodsReq, opts ...client.CallOption) (*QueryMeGoodsRes, error)
}

type goodsnodeService struct {
	c    client.Client
	name string
}

func NewGoodsnodeService(name string, c client.Client) GoodsnodeService {
	return &goodsnodeService{
		c:    c,
		name: name,
	}
}

func (c *goodsnodeService) AddMeGoodsCategory(ctx context.Context, in *AddMeGoodsCategoryReq, opts ...client.CallOption) (*AddMeGoodsCategoryRes, error) {
	req := c.c.NewRequest(c.name, "GoodsnodeService.AddMeGoodsCategory", in)
	out := new(AddMeGoodsCategoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsnodeService) GetMeGoodsCategory(ctx context.Context, in *GetMeGoodsCategoryReq, opts ...client.CallOption) (*GetMeGoodsCategoryRes, error) {
	req := c.c.NewRequest(c.name, "GoodsnodeService.GetMeGoodsCategory", in)
	out := new(GetMeGoodsCategoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsnodeService) AddMeGoods(ctx context.Context, in *AddMeGoodsReq, opts ...client.CallOption) (*AddMeGoodsRes, error) {
	req := c.c.NewRequest(c.name, "GoodsnodeService.AddMeGoods", in)
	out := new(AddMeGoodsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsnodeService) UpdateMeGoods(ctx context.Context, in *UpdateMeGoodsReq, opts ...client.CallOption) (*UpdateMeGoodsRes, error) {
	req := c.c.NewRequest(c.name, "GoodsnodeService.UpdateMeGoods", in)
	out := new(UpdateMeGoodsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsnodeService) QueryMeGoods(ctx context.Context, in *QueryMeGoodsReq, opts ...client.CallOption) (*QueryMeGoodsRes, error) {
	req := c.c.NewRequest(c.name, "GoodsnodeService.QueryMeGoods", in)
	out := new(QueryMeGoodsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoodsnodeService service

type GoodsnodeServiceHandler interface {
	// 我的物品
	AddMeGoodsCategory(context.Context, *AddMeGoodsCategoryReq, *AddMeGoodsCategoryRes) error
	GetMeGoodsCategory(context.Context, *GetMeGoodsCategoryReq, *GetMeGoodsCategoryRes) error
	AddMeGoods(context.Context, *AddMeGoodsReq, *AddMeGoodsRes) error
	UpdateMeGoods(context.Context, *UpdateMeGoodsReq, *UpdateMeGoodsRes) error
	QueryMeGoods(context.Context, *QueryMeGoodsReq, *QueryMeGoodsRes) error
}

func RegisterGoodsnodeServiceHandler(s server.Server, hdlr GoodsnodeServiceHandler, opts ...server.HandlerOption) error {
	type goodsnodeService interface {
		AddMeGoodsCategory(ctx context.Context, in *AddMeGoodsCategoryReq, out *AddMeGoodsCategoryRes) error
		GetMeGoodsCategory(ctx context.Context, in *GetMeGoodsCategoryReq, out *GetMeGoodsCategoryRes) error
		AddMeGoods(ctx context.Context, in *AddMeGoodsReq, out *AddMeGoodsRes) error
		UpdateMeGoods(ctx context.Context, in *UpdateMeGoodsReq, out *UpdateMeGoodsRes) error
		QueryMeGoods(ctx context.Context, in *QueryMeGoodsReq, out *QueryMeGoodsRes) error
	}
	type GoodsnodeService struct {
		goodsnodeService
	}
	h := &goodsnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GoodsnodeService{h}, opts...))
}

type goodsnodeServiceHandler struct {
	GoodsnodeServiceHandler
}

func (h *goodsnodeServiceHandler) AddMeGoodsCategory(ctx context.Context, in *AddMeGoodsCategoryReq, out *AddMeGoodsCategoryRes) error {
	return h.GoodsnodeServiceHandler.AddMeGoodsCategory(ctx, in, out)
}

func (h *goodsnodeServiceHandler) GetMeGoodsCategory(ctx context.Context, in *GetMeGoodsCategoryReq, out *GetMeGoodsCategoryRes) error {
	return h.GoodsnodeServiceHandler.GetMeGoodsCategory(ctx, in, out)
}

func (h *goodsnodeServiceHandler) AddMeGoods(ctx context.Context, in *AddMeGoodsReq, out *AddMeGoodsRes) error {
	return h.GoodsnodeServiceHandler.AddMeGoods(ctx, in, out)
}

func (h *goodsnodeServiceHandler) UpdateMeGoods(ctx context.Context, in *UpdateMeGoodsReq, out *UpdateMeGoodsRes) error {
	return h.GoodsnodeServiceHandler.UpdateMeGoods(ctx, in, out)
}

func (h *goodsnodeServiceHandler) QueryMeGoods(ctx context.Context, in *QueryMeGoodsReq, out *QueryMeGoodsRes) error {
	return h.GoodsnodeServiceHandler.QueryMeGoods(ctx, in, out)
}
