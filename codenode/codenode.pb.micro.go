// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: codenode.proto

package codenode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CodenodeService service

func NewCodenodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CodenodeService service

type CodenodeService interface {
	// 发送验证码
	SendCode(ctx context.Context, in *CodeReq, opts ...client.CallOption) (*CodeRes, error)
	// 请求验证码
	VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...client.CallOption) (*VerifyCodeRes, error)
}

type codenodeService struct {
	c    client.Client
	name string
}

func NewCodenodeService(name string, c client.Client) CodenodeService {
	return &codenodeService{
		c:    c,
		name: name,
	}
}

func (c *codenodeService) SendCode(ctx context.Context, in *CodeReq, opts ...client.CallOption) (*CodeRes, error) {
	req := c.c.NewRequest(c.name, "CodenodeService.SendCode", in)
	out := new(CodeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codenodeService) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...client.CallOption) (*VerifyCodeRes, error) {
	req := c.c.NewRequest(c.name, "CodenodeService.VerifyCode", in)
	out := new(VerifyCodeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CodenodeService service

type CodenodeServiceHandler interface {
	// 发送验证码
	SendCode(context.Context, *CodeReq, *CodeRes) error
	// 请求验证码
	VerifyCode(context.Context, *VerifyCodeReq, *VerifyCodeRes) error
}

func RegisterCodenodeServiceHandler(s server.Server, hdlr CodenodeServiceHandler, opts ...server.HandlerOption) error {
	type codenodeService interface {
		SendCode(ctx context.Context, in *CodeReq, out *CodeRes) error
		VerifyCode(ctx context.Context, in *VerifyCodeReq, out *VerifyCodeRes) error
	}
	type CodenodeService struct {
		codenodeService
	}
	h := &codenodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CodenodeService{h}, opts...))
}

type codenodeServiceHandler struct {
	CodenodeServiceHandler
}

func (h *codenodeServiceHandler) SendCode(ctx context.Context, in *CodeReq, out *CodeRes) error {
	return h.CodenodeServiceHandler.SendCode(ctx, in, out)
}

func (h *codenodeServiceHandler) VerifyCode(ctx context.Context, in *VerifyCodeReq, out *VerifyCodeRes) error {
	return h.CodenodeServiceHandler.VerifyCode(ctx, in, out)
}
