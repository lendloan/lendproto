// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: s2sname.proto

package s2sname

import (
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for S2SnameService service

func NewS2SnameServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for S2SnameService service

type S2SnameService interface {
	// 注册s2s服务
	RegisterS2Sname(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterRes, error)
	// 更新s2sname信息
	UpdateS2Sname(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error)
	// 根据参数获取对应的s2s列表
	FetchS2Sname(ctx context.Context, in *Request, opts ...client.CallOption) (*FetchRes, error)
	// 获取所有的s2sname 列表信息
	FetchS2Snames(ctx context.Context, in *Request, opts ...client.CallOption) (*FetchRes, error)
	// 服务心跳包，用于更新服务的状态
	Heart(ctx context.Context, in *HeartReq, opts ...client.CallOption) (*HeartRes, error)
	// 获取所有的s2sname信息
	S2Sinfo(ctx context.Context, in *S2SinfoReq, opts ...client.CallOption) (*S2SinfoRes, error)
}

type s2SnameService struct {
	c    client.Client
	name string
}

func NewS2SnameService(name string, c client.Client) S2SnameService {
	return &s2SnameService{
		c:    c,
		name: name,
	}
}

func (c *s2SnameService) RegisterS2Sname(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterRes, error) {
	req := c.c.NewRequest(c.name, "S2SnameService.RegisterS2sname", in)
	out := new(RegisterRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2SnameService) UpdateS2Sname(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error) {
	req := c.c.NewRequest(c.name, "S2SnameService.UpdateS2sname", in)
	out := new(UpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2SnameService) FetchS2Sname(ctx context.Context, in *Request, opts ...client.CallOption) (*FetchRes, error) {
	req := c.c.NewRequest(c.name, "S2SnameService.FetchS2sname", in)
	out := new(FetchRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2SnameService) FetchS2Snames(ctx context.Context, in *Request, opts ...client.CallOption) (*FetchRes, error) {
	req := c.c.NewRequest(c.name, "S2SnameService.FetchS2snames", in)
	out := new(FetchRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2SnameService) Heart(ctx context.Context, in *HeartReq, opts ...client.CallOption) (*HeartRes, error) {
	req := c.c.NewRequest(c.name, "S2SnameService.Heart", in)
	out := new(HeartRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2SnameService) S2Sinfo(ctx context.Context, in *S2SinfoReq, opts ...client.CallOption) (*S2SinfoRes, error) {
	req := c.c.NewRequest(c.name, "S2SnameService.S2sinfo", in)
	out := new(S2SinfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for S2SnameService service

type S2SnameServiceHandler interface {
	// 注册s2s服务
	RegisterS2Sname(context.Context, *RegisterReq, *RegisterRes) error
	// 更新s2sname信息
	UpdateS2Sname(context.Context, *UpdateReq, *UpdateRes) error
	// 根据参数获取对应的s2s列表
	FetchS2Sname(context.Context, *Request, *FetchRes) error
	// 获取所有的s2sname 列表信息
	FetchS2Snames(context.Context, *Request, *FetchRes) error
	// 服务心跳包，用于更新服务的状态
	Heart(context.Context, *HeartReq, *HeartRes) error
	// 获取所有的s2sname信息
	S2Sinfo(context.Context, *S2SinfoReq, *S2SinfoRes) error
}

func RegisterS2SnameServiceHandler(s server.Server, hdlr S2SnameServiceHandler, opts ...server.HandlerOption) error {
	type s2SnameService interface {
		RegisterS2Sname(ctx context.Context, in *RegisterReq, out *RegisterRes) error
		UpdateS2Sname(ctx context.Context, in *UpdateReq, out *UpdateRes) error
		FetchS2Sname(ctx context.Context, in *Request, out *FetchRes) error
		FetchS2Snames(ctx context.Context, in *Request, out *FetchRes) error
		Heart(ctx context.Context, in *HeartReq, out *HeartRes) error
		S2Sinfo(ctx context.Context, in *S2SinfoReq, out *S2SinfoRes) error
	}
	type S2SnameService struct {
		s2SnameService
	}
	h := &s2SnameServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&S2SnameService{h}, opts...))
}

type s2SnameServiceHandler struct {
	S2SnameServiceHandler
}

func (h *s2SnameServiceHandler) RegisterS2Sname(ctx context.Context, in *RegisterReq, out *RegisterRes) error {
	return h.S2SnameServiceHandler.RegisterS2Sname(ctx, in, out)
}

func (h *s2SnameServiceHandler) UpdateS2Sname(ctx context.Context, in *UpdateReq, out *UpdateRes) error {
	return h.S2SnameServiceHandler.UpdateS2Sname(ctx, in, out)
}

func (h *s2SnameServiceHandler) FetchS2Sname(ctx context.Context, in *Request, out *FetchRes) error {
	return h.S2SnameServiceHandler.FetchS2Sname(ctx, in, out)
}

func (h *s2SnameServiceHandler) FetchS2Snames(ctx context.Context, in *Request, out *FetchRes) error {
	return h.S2SnameServiceHandler.FetchS2Snames(ctx, in, out)
}

func (h *s2SnameServiceHandler) Heart(ctx context.Context, in *HeartReq, out *HeartRes) error {
	return h.S2SnameServiceHandler.Heart(ctx, in, out)
}

func (h *s2SnameServiceHandler) S2Sinfo(ctx context.Context, in *S2SinfoReq, out *S2SinfoRes) error {
	return h.S2SnameServiceHandler.S2Sinfo(ctx, in, out)
}
