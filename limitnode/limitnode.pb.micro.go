// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: limitnode.proto

package limitnode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LimitnodeService service

func NewLimitnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LimitnodeService service

type LimitnodeService interface {
	// 检查修改试题是否受限
	ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, opts ...client.CallOption) (*ModifyTimuLimitRes, error)
	// 检查添加试题是否受限
	AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, opts ...client.CallOption) (*AddTimuLimitRes, error)
	// 浏览试题量是否达到限制
	BrowserTimuLimit(ctx context.Context, in *BrowserTimuLimitReq, opts ...client.CallOption) (*BrowserTimuLimitRes, error)
	// 下载试题是否达到限制
	DownTimuLimit(ctx context.Context, in *DownTimuLimitReq, opts ...client.CallOption) (*DownTimuLimitRes, error)
}

type limitnodeService struct {
	c    client.Client
	name string
}

func NewLimitnodeService(name string, c client.Client) LimitnodeService {
	return &limitnodeService{
		c:    c,
		name: name,
	}
}

func (c *limitnodeService) ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, opts ...client.CallOption) (*ModifyTimuLimitRes, error) {
	req := c.c.NewRequest(c.name, "LimitnodeService.ModifyTimuLimit", in)
	out := new(ModifyTimuLimitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitnodeService) AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, opts ...client.CallOption) (*AddTimuLimitRes, error) {
	req := c.c.NewRequest(c.name, "LimitnodeService.AddTimuLimit", in)
	out := new(AddTimuLimitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitnodeService) BrowserTimuLimit(ctx context.Context, in *BrowserTimuLimitReq, opts ...client.CallOption) (*BrowserTimuLimitRes, error) {
	req := c.c.NewRequest(c.name, "LimitnodeService.BrowserTimuLimit", in)
	out := new(BrowserTimuLimitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitnodeService) DownTimuLimit(ctx context.Context, in *DownTimuLimitReq, opts ...client.CallOption) (*DownTimuLimitRes, error) {
	req := c.c.NewRequest(c.name, "LimitnodeService.DownTimuLimit", in)
	out := new(DownTimuLimitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LimitnodeService service

type LimitnodeServiceHandler interface {
	// 检查修改试题是否受限
	ModifyTimuLimit(context.Context, *ModifyTimuLimitReq, *ModifyTimuLimitRes) error
	// 检查添加试题是否受限
	AddTimuLimit(context.Context, *AddTimuLimitReq, *AddTimuLimitRes) error
	// 浏览试题量是否达到限制
	BrowserTimuLimit(context.Context, *BrowserTimuLimitReq, *BrowserTimuLimitRes) error
	// 下载试题是否达到限制
	DownTimuLimit(context.Context, *DownTimuLimitReq, *DownTimuLimitRes) error
}

func RegisterLimitnodeServiceHandler(s server.Server, hdlr LimitnodeServiceHandler, opts ...server.HandlerOption) error {
	type limitnodeService interface {
		ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, out *ModifyTimuLimitRes) error
		AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, out *AddTimuLimitRes) error
		BrowserTimuLimit(ctx context.Context, in *BrowserTimuLimitReq, out *BrowserTimuLimitRes) error
		DownTimuLimit(ctx context.Context, in *DownTimuLimitReq, out *DownTimuLimitRes) error
	}
	type LimitnodeService struct {
		limitnodeService
	}
	h := &limitnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LimitnodeService{h}, opts...))
}

type limitnodeServiceHandler struct {
	LimitnodeServiceHandler
}

func (h *limitnodeServiceHandler) ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, out *ModifyTimuLimitRes) error {
	return h.LimitnodeServiceHandler.ModifyTimuLimit(ctx, in, out)
}

func (h *limitnodeServiceHandler) AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, out *AddTimuLimitRes) error {
	return h.LimitnodeServiceHandler.AddTimuLimit(ctx, in, out)
}

func (h *limitnodeServiceHandler) BrowserTimuLimit(ctx context.Context, in *BrowserTimuLimitReq, out *BrowserTimuLimitRes) error {
	return h.LimitnodeServiceHandler.BrowserTimuLimit(ctx, in, out)
}

func (h *limitnodeServiceHandler) DownTimuLimit(ctx context.Context, in *DownTimuLimitReq, out *DownTimuLimitRes) error {
	return h.LimitnodeServiceHandler.DownTimuLimit(ctx, in, out)
}
