// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: loginnode.proto

package loginnode

import (
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LoginnodeService service

func NewLoginnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LoginnodeService service

type LoginnodeService interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error)
	LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...client.CallOption) (*LoginByCodeRes, error)
	LoginWechat(ctx context.Context, in *LoginWechatReq, opts ...client.CallOption) (*LoginWechatRes, error)
	LoginAlipay(ctx context.Context, in *LoginAlipayReq, opts ...client.CallOption) (*LoginAlipayRes, error)
	// 退出登录
	Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutRes, error)
	// 刷新
	Refresh(ctx context.Context, in *RefreshReq, opts ...client.CallOption) (*RefreshRes, error)
}

type loginnodeService struct {
	c    client.Client
	name string
}

func NewLoginnodeService(name string, c client.Client) LoginnodeService {
	return &loginnodeService{
		c:    c,
		name: name,
	}
}

func (c *loginnodeService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error) {
	req := c.c.NewRequest(c.name, "LoginnodeService.Login", in)
	out := new(LoginRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginnodeService) LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...client.CallOption) (*LoginByCodeRes, error) {
	req := c.c.NewRequest(c.name, "LoginnodeService.LoginByCode", in)
	out := new(LoginByCodeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginnodeService) LoginWechat(ctx context.Context, in *LoginWechatReq, opts ...client.CallOption) (*LoginWechatRes, error) {
	req := c.c.NewRequest(c.name, "LoginnodeService.LoginWechat", in)
	out := new(LoginWechatRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginnodeService) LoginAlipay(ctx context.Context, in *LoginAlipayReq, opts ...client.CallOption) (*LoginAlipayRes, error) {
	req := c.c.NewRequest(c.name, "LoginnodeService.LoginAlipay", in)
	out := new(LoginAlipayRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginnodeService) Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutRes, error) {
	req := c.c.NewRequest(c.name, "LoginnodeService.Logout", in)
	out := new(LogoutRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginnodeService) Refresh(ctx context.Context, in *RefreshReq, opts ...client.CallOption) (*RefreshRes, error) {
	req := c.c.NewRequest(c.name, "LoginnodeService.Refresh", in)
	out := new(RefreshRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginnodeService service

type LoginnodeServiceHandler interface {
	// 登录
	Login(context.Context, *LoginReq, *LoginRes) error
	LoginByCode(context.Context, *LoginByCodeReq, *LoginByCodeRes) error
	LoginWechat(context.Context, *LoginWechatReq, *LoginWechatRes) error
	LoginAlipay(context.Context, *LoginAlipayReq, *LoginAlipayRes) error
	// 退出登录
	Logout(context.Context, *LogoutReq, *LogoutRes) error
	// 刷新
	Refresh(context.Context, *RefreshReq, *RefreshRes) error
}

func RegisterLoginnodeServiceHandler(s server.Server, hdlr LoginnodeServiceHandler, opts ...server.HandlerOption) error {
	type loginnodeService interface {
		Login(ctx context.Context, in *LoginReq, out *LoginRes) error
		LoginByCode(ctx context.Context, in *LoginByCodeReq, out *LoginByCodeRes) error
		LoginWechat(ctx context.Context, in *LoginWechatReq, out *LoginWechatRes) error
		LoginAlipay(ctx context.Context, in *LoginAlipayReq, out *LoginAlipayRes) error
		Logout(ctx context.Context, in *LogoutReq, out *LogoutRes) error
		Refresh(ctx context.Context, in *RefreshReq, out *RefreshRes) error
	}
	type LoginnodeService struct {
		loginnodeService
	}
	h := &loginnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LoginnodeService{h}, opts...))
}

type loginnodeServiceHandler struct {
	LoginnodeServiceHandler
}

func (h *loginnodeServiceHandler) Login(ctx context.Context, in *LoginReq, out *LoginRes) error {
	return h.LoginnodeServiceHandler.Login(ctx, in, out)
}

func (h *loginnodeServiceHandler) LoginByCode(ctx context.Context, in *LoginByCodeReq, out *LoginByCodeRes) error {
	return h.LoginnodeServiceHandler.LoginByCode(ctx, in, out)
}

func (h *loginnodeServiceHandler) LoginWechat(ctx context.Context, in *LoginWechatReq, out *LoginWechatRes) error {
	return h.LoginnodeServiceHandler.LoginWechat(ctx, in, out)
}

func (h *loginnodeServiceHandler) LoginAlipay(ctx context.Context, in *LoginAlipayReq, out *LoginAlipayRes) error {
	return h.LoginnodeServiceHandler.LoginAlipay(ctx, in, out)
}

func (h *loginnodeServiceHandler) Logout(ctx context.Context, in *LogoutReq, out *LogoutRes) error {
	return h.LoginnodeServiceHandler.Logout(ctx, in, out)
}

func (h *loginnodeServiceHandler) Refresh(ctx context.Context, in *RefreshReq, out *RefreshRes) error {
	return h.LoginnodeServiceHandler.Refresh(ctx, in, out)
}
