// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: lognode.proto

package lognode

import (
	common "github.com/lendloan/lendproto/common"
	rescode "github.com/lendloan/lendproto/rescode"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevel int32

const (
	LogLevel_INFO  LogLevel = 0
	LogLevel_DEBUG LogLevel = 1
	LogLevel_WARN  LogLevel = 2
	LogLevel_ERROR LogLevel = 3
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "INFO",
		1: "DEBUG",
		2: "WARN",
		3: "ERROR",
	}
	LogLevel_value = map[string]int32{
		"INFO":  0,
		"DEBUG": 1,
		"WARN":  2,
		"ERROR": 3,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_lognode_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_lognode_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{0}
}

type LogDesc int32

const (
	LogDesc_CONSOLE LogDesc = 0
	LogDesc_FILE    LogDesc = 1
	LogDesc_DB      LogDesc = 2
)

// Enum value maps for LogDesc.
var (
	LogDesc_name = map[int32]string{
		0: "CONSOLE",
		1: "FILE",
		2: "DB",
	}
	LogDesc_value = map[string]int32{
		"CONSOLE": 0,
		"FILE":    1,
		"DB":      2,
	}
)

func (x LogDesc) Enum() *LogDesc {
	p := new(LogDesc)
	*p = x
	return p
}

func (x LogDesc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogDesc) Descriptor() protoreflect.EnumDescriptor {
	return file_lognode_proto_enumTypes[1].Descriptor()
}

func (LogDesc) Type() protoreflect.EnumType {
	return &file_lognode_proto_enumTypes[1]
}

func (x LogDesc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogDesc.Descriptor instead.
func (LogDesc) EnumDescriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{1}
}

type CallLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      LogLevel          `protobuf:"varint,1,opt,name=level,proto3,enum=lognode.LogLevel" json:"level,omitempty"`
	Desc       LogDesc           `protobuf:"varint,2,opt,name=desc,proto3,enum=lognode.LogDesc" json:"desc,omitempty"`
	ServerName string            `protobuf:"bytes,3,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	Ip         string            `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Func       string            `protobuf:"bytes,5,opt,name=func,proto3" json:"func,omitempty"`
	Timestamp  string            `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status     string            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Req        string            `protobuf:"bytes,8,opt,name=req,proto3" json:"req,omitempty"`
	Res        string            `protobuf:"bytes,9,opt,name=res,proto3" json:"res,omitempty"`
	Extra      map[string]string `protobuf:"bytes,10,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CallLogReq) Reset() {
	*x = CallLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lognode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallLogReq) ProtoMessage() {}

func (x *CallLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_lognode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallLogReq.ProtoReflect.Descriptor instead.
func (*CallLogReq) Descriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{0}
}

func (x *CallLogReq) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_INFO
}

func (x *CallLogReq) GetDesc() LogDesc {
	if x != nil {
		return x.Desc
	}
	return LogDesc_CONSOLE
}

func (x *CallLogReq) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CallLogReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CallLogReq) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *CallLogReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *CallLogReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CallLogReq) GetReq() string {
	if x != nil {
		return x.Req
	}
	return ""
}

func (x *CallLogReq) GetRes() string {
	if x != nil {
		return x.Res
	}
	return ""
}

func (x *CallLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      LogLevel          `protobuf:"varint,1,opt,name=level,proto3,enum=lognode.LogLevel" json:"level,omitempty"`
	Desc       LogDesc           `protobuf:"varint,2,opt,name=desc,proto3,enum=lognode.LogDesc" json:"desc,omitempty"`
	ServerName string            `protobuf:"bytes,3,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	Ip         string            `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Timestamp  string            `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Func       string            `protobuf:"bytes,6,opt,name=func,proto3" json:"func,omitempty"`
	Info       string            `protobuf:"bytes,7,opt,name=info,proto3" json:"info,omitempty"`
	Extra      map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogReq) Reset() {
	*x = LogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lognode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogReq) ProtoMessage() {}

func (x *LogReq) ProtoReflect() protoreflect.Message {
	mi := &file_lognode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogReq.ProtoReflect.Descriptor instead.
func (*LogReq) Descriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{1}
}

func (x *LogReq) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_INFO
}

func (x *LogReq) GetDesc() LogDesc {
	if x != nil {
		return x.Desc
	}
	return LogDesc_CONSOLE
}

func (x *LogReq) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *LogReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LogReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LogReq) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *LogReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *LogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserLogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid      int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Ip       string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Country  string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Province string `protobuf:"bytes,6,opt,name=province,proto3" json:"province,omitempty"`
	City     string `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	District string `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	Platom   string `protobuf:"bytes,9,opt,name=platom,proto3" json:"platom,omitempty"`
	Appid    string `protobuf:"bytes,10,opt,name=appid,proto3" json:"appid,omitempty"`
	Info     string `protobuf:"bytes,11,opt,name=info,proto3" json:"info,omitempty"`
	OldInfo  string `protobuf:"bytes,12,opt,name=old_info,json=oldInfo,proto3" json:"old_info,omitempty"`
	NewInfo  string `protobuf:"bytes,13,opt,name=new_info,json=newInfo,proto3" json:"new_info,omitempty"`
	Mark     string `protobuf:"bytes,14,opt,name=mark,proto3" json:"mark,omitempty"`
	CreateAt string `protobuf:"bytes,15,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	LogType  int64  `protobuf:"varint,16,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	TypeInfo string `protobuf:"bytes,17,opt,name=type_info,json=typeInfo,proto3" json:"type_info,omitempty"`
}

func (x *UserLogItem) Reset() {
	*x = UserLogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lognode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogItem) ProtoMessage() {}

func (x *UserLogItem) ProtoReflect() protoreflect.Message {
	mi := &file_lognode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogItem.ProtoReflect.Descriptor instead.
func (*UserLogItem) Descriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{2}
}

func (x *UserLogItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLogItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserLogItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserLogItem) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserLogItem) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UserLogItem) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UserLogItem) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserLogItem) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *UserLogItem) GetPlatom() string {
	if x != nil {
		return x.Platom
	}
	return ""
}

func (x *UserLogItem) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *UserLogItem) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *UserLogItem) GetOldInfo() string {
	if x != nil {
		return x.OldInfo
	}
	return ""
}

func (x *UserLogItem) GetNewInfo() string {
	if x != nil {
		return x.NewInfo
	}
	return ""
}

func (x *UserLogItem) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *UserLogItem) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *UserLogItem) GetLogType() int64 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *UserLogItem) GetTypeInfo() string {
	if x != nil {
		return x.TypeInfo
	}
	return ""
}

type QueryUserLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id      int64             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid     int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType int32             `protobuf:"varint,4,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	Page    int32             `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Extra   map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryUserLogReq) Reset() {
	*x = QueryUserLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lognode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserLogReq) ProtoMessage() {}

func (x *QueryUserLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_lognode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserLogReq.ProtoReflect.Descriptor instead.
func (*QueryUserLogReq) Descriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{3}
}

func (x *QueryUserLogReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QueryUserLogReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryUserLogReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryUserLogReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *QueryUserLogReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryUserLogReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryUserLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryUserLogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Logs    []*UserLogItem    `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryUserLogRes) Reset() {
	*x = QueryUserLogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lognode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserLogRes) ProtoMessage() {}

func (x *QueryUserLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_lognode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserLogRes.ProtoReflect.Descriptor instead.
func (*QueryUserLogRes) Descriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{4}
}

func (x *QueryUserLogRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QueryUserLogRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QueryUserLogRes) GetLogs() []*UserLogItem {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *QueryUserLogRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserLogCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType int32             `protobuf:"varint,3,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserLogCountReq) Reset() {
	*x = UserLogCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lognode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogCountReq) ProtoMessage() {}

func (x *UserLogCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_lognode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogCountReq.ProtoReflect.Descriptor instead.
func (*UserLogCountReq) Descriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{5}
}

func (x *UserLogCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *UserLogCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserLogCountReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *UserLogCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserLogCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserLogCountRes) Reset() {
	*x = UserLogCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lognode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogCountRes) ProtoMessage() {}

func (x *UserLogCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_lognode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogCountRes.ProtoReflect.Descriptor instead.
func (*UserLogCountRes) Descriptor() ([]byte, []int) {
	return file_lognode_proto_rawDescGZIP(), []int{6}
}

func (x *UserLogCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UserLogCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserLogCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserLogCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_lognode_proto protoreflect.FileDescriptor

var file_lognode_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xba, 0x02, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x6f,
	0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2,
	0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f,
	0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x34, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41,
	0x52, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a,
	0x28, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f,
	0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x42, 0x10, 0x02, 0x32, 0xfc, 0x01, 0x0a, 0x0e, 0x4c, 0x6f,
	0x67, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c,
	0x4c, 0x6f, 0x67, 0x12, 0x13, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x2e, 0x6c,
	0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6c,
	0x6f, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x6c, 0x6f,
	0x67, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lognode_proto_rawDescOnce sync.Once
	file_lognode_proto_rawDescData = file_lognode_proto_rawDesc
)

func file_lognode_proto_rawDescGZIP() []byte {
	file_lognode_proto_rawDescOnce.Do(func() {
		file_lognode_proto_rawDescData = protoimpl.X.CompressGZIP(file_lognode_proto_rawDescData)
	})
	return file_lognode_proto_rawDescData
}

var file_lognode_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lognode_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_lognode_proto_goTypes = []interface{}{
	(LogLevel)(0),            // 0: lognode.LogLevel
	(LogDesc)(0),             // 1: lognode.LogDesc
	(*CallLogReq)(nil),       // 2: lognode.CallLogReq
	(*LogReq)(nil),           // 3: lognode.LogReq
	(*UserLogItem)(nil),      // 4: lognode.UserLogItem
	(*QueryUserLogReq)(nil),  // 5: lognode.QueryUserLogReq
	(*QueryUserLogRes)(nil),  // 6: lognode.QueryUserLogRes
	(*UserLogCountReq)(nil),  // 7: lognode.UserLogCountReq
	(*UserLogCountRes)(nil),  // 8: lognode.UserLogCountRes
	nil,                      // 9: lognode.CallLogReq.ExtraEntry
	nil,                      // 10: lognode.LogReq.ExtraEntry
	nil,                      // 11: lognode.QueryUserLogReq.ExtraEntry
	nil,                      // 12: lognode.QueryUserLogRes.ExtraEntry
	nil,                      // 13: lognode.UserLogCountReq.ExtraEntry
	nil,                      // 14: lognode.UserLogCountRes.ExtraEntry
	(*common.Authorize)(nil), // 15: common.Authorize
	(rescode.Code)(0),        // 16: rescode.Code
	(*common.Response)(nil),  // 17: common.Response
}
var file_lognode_proto_depIdxs = []int32{
	0,  // 0: lognode.CallLogReq.level:type_name -> lognode.LogLevel
	1,  // 1: lognode.CallLogReq.desc:type_name -> lognode.LogDesc
	9,  // 2: lognode.CallLogReq.extra:type_name -> lognode.CallLogReq.ExtraEntry
	0,  // 3: lognode.LogReq.level:type_name -> lognode.LogLevel
	1,  // 4: lognode.LogReq.desc:type_name -> lognode.LogDesc
	10, // 5: lognode.LogReq.extra:type_name -> lognode.LogReq.ExtraEntry
	15, // 6: lognode.QueryUserLogReq.auth:type_name -> common.Authorize
	11, // 7: lognode.QueryUserLogReq.extra:type_name -> lognode.QueryUserLogReq.ExtraEntry
	16, // 8: lognode.QueryUserLogRes.rescode:type_name -> rescode.Code
	4,  // 9: lognode.QueryUserLogRes.logs:type_name -> lognode.UserLogItem
	12, // 10: lognode.QueryUserLogRes.extra:type_name -> lognode.QueryUserLogRes.ExtraEntry
	15, // 11: lognode.UserLogCountReq.auth:type_name -> common.Authorize
	13, // 12: lognode.UserLogCountReq.extra:type_name -> lognode.UserLogCountReq.ExtraEntry
	16, // 13: lognode.UserLogCountRes.rescode:type_name -> rescode.Code
	14, // 14: lognode.UserLogCountRes.extra:type_name -> lognode.UserLogCountRes.ExtraEntry
	3,  // 15: lognode.LognodeService.Log:input_type -> lognode.LogReq
	2,  // 16: lognode.LognodeService.CallLog:input_type -> lognode.CallLogReq
	5,  // 17: lognode.LognodeService.QueryUserLog:input_type -> lognode.QueryUserLogReq
	7,  // 18: lognode.LognodeService.UserLogCount:input_type -> lognode.UserLogCountReq
	17, // 19: lognode.LognodeService.Log:output_type -> common.Response
	17, // 20: lognode.LognodeService.CallLog:output_type -> common.Response
	6,  // 21: lognode.LognodeService.QueryUserLog:output_type -> lognode.QueryUserLogRes
	8,  // 22: lognode.LognodeService.UserLogCount:output_type -> lognode.UserLogCountRes
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_lognode_proto_init() }
func file_lognode_proto_init() {
	if File_lognode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lognode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lognode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lognode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lognode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lognode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserLogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lognode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lognode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lognode_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lognode_proto_goTypes,
		DependencyIndexes: file_lognode_proto_depIdxs,
		EnumInfos:         file_lognode_proto_enumTypes,
		MessageInfos:      file_lognode_proto_msgTypes,
	}.Build()
	File_lognode_proto = out.File
	file_lognode_proto_rawDesc = nil
	file_lognode_proto_goTypes = nil
	file_lognode_proto_depIdxs = nil
}
