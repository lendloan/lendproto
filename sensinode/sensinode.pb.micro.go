// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sensinode.proto

package sensinode

import (
	_ "github.com/lendloan/lendproto/common"
	_ "github.com/lendloan/lendproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SensinodeService service

func NewSensinodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SensinodeService service

type SensinodeService interface {
	// 更新用户的coin数值
	RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, opts ...client.CallOption) (*RefreshUserCoinRes, error)
	// 更新用户vip
	RefreshUserVip(ctx context.Context, in *RefreshUserVipReq, opts ...client.CallOption) (*RefreshUserVipRes, error)
	// 更新用户积分
	RefreshUserScore(ctx context.Context, in *RefreshUserScoreReq, opts ...client.CallOption) (*RefreshUserScoreRes, error)
}

type sensinodeService struct {
	c    client.Client
	name string
}

func NewSensinodeService(name string, c client.Client) SensinodeService {
	return &sensinodeService{
		c:    c,
		name: name,
	}
}

func (c *sensinodeService) RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, opts ...client.CallOption) (*RefreshUserCoinRes, error) {
	req := c.c.NewRequest(c.name, "SensinodeService.RefreshUserCoin", in)
	out := new(RefreshUserCoinRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensinodeService) RefreshUserVip(ctx context.Context, in *RefreshUserVipReq, opts ...client.CallOption) (*RefreshUserVipRes, error) {
	req := c.c.NewRequest(c.name, "SensinodeService.RefreshUserVip", in)
	out := new(RefreshUserVipRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensinodeService) RefreshUserScore(ctx context.Context, in *RefreshUserScoreReq, opts ...client.CallOption) (*RefreshUserScoreRes, error) {
	req := c.c.NewRequest(c.name, "SensinodeService.RefreshUserScore", in)
	out := new(RefreshUserScoreRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SensinodeService service

type SensinodeServiceHandler interface {
	// 更新用户的coin数值
	RefreshUserCoin(context.Context, *RefreshUserCoinReq, *RefreshUserCoinRes) error
	// 更新用户vip
	RefreshUserVip(context.Context, *RefreshUserVipReq, *RefreshUserVipRes) error
	// 更新用户积分
	RefreshUserScore(context.Context, *RefreshUserScoreReq, *RefreshUserScoreRes) error
}

func RegisterSensinodeServiceHandler(s server.Server, hdlr SensinodeServiceHandler, opts ...server.HandlerOption) error {
	type sensinodeService interface {
		RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, out *RefreshUserCoinRes) error
		RefreshUserVip(ctx context.Context, in *RefreshUserVipReq, out *RefreshUserVipRes) error
		RefreshUserScore(ctx context.Context, in *RefreshUserScoreReq, out *RefreshUserScoreRes) error
	}
	type SensinodeService struct {
		sensinodeService
	}
	h := &sensinodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SensinodeService{h}, opts...))
}

type sensinodeServiceHandler struct {
	SensinodeServiceHandler
}

func (h *sensinodeServiceHandler) RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, out *RefreshUserCoinRes) error {
	return h.SensinodeServiceHandler.RefreshUserCoin(ctx, in, out)
}

func (h *sensinodeServiceHandler) RefreshUserVip(ctx context.Context, in *RefreshUserVipReq, out *RefreshUserVipRes) error {
	return h.SensinodeServiceHandler.RefreshUserVip(ctx, in, out)
}

func (h *sensinodeServiceHandler) RefreshUserScore(ctx context.Context, in *RefreshUserScoreReq, out *RefreshUserScoreRes) error {
	return h.SensinodeServiceHandler.RefreshUserScore(ctx, in, out)
}
